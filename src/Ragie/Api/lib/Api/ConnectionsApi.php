<?php
/**
 * ConnectionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Ragie\Api\ApiException;
use Ragie\Api\Configuration;
use Ragie\Api\FormDataProcessor;
use Ragie\Api\HeaderSelector;
use Ragie\Api\ObjectSerializer;

/**
 * ConnectionsApi Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConnectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createConnection' => [
            'application/json',
        ],
        'createOauthRedirectUrlConnectionsOauthPost' => [
            'application/json',
        ],
        'deleteConnectionConnectionsConnectionIdDeletePost' => [
            'application/json',
        ],
        'getConnectionConnectionsConnectionIdGet' => [
            'application/json',
        ],
        'getConnectionStatsConnectionsConnectionIdStatsGet' => [
            'application/json',
        ],
        'listConnectionSourceTypesConnectionsSourceTypeGet' => [
            'application/json',
        ],
        'listConnectionsConnectionsGet' => [
            'application/json',
        ],
        'setConnectionEnabledConnectionsConnectionIdEnabledPut' => [
            'application/json',
        ],
        'setConnectionLimitsConnectionsConnectionIdLimitPut' => [
            'application/json',
        ],
        'syncConnection' => [
            'application/json',
        ],
        'updateConnectionConnectionsConnectionIdPut' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createConnection
     *
     * Create Connection
     *
     * @param  \Ragie\Api\Model\PublicCreateConnection $public_create_connection public_create_connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function createConnection($public_create_connection, string $contentType = self::contentTypes['createConnection'][0])
    {
        list($response) = $this->createConnectionWithHttpInfo($public_create_connection, $contentType);
        return $response;
    }

    /**
     * Operation createConnectionWithHttpInfo
     *
     * Create Connection
     *
     * @param  \Ragie\Api\Model\PublicCreateConnection $public_create_connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createConnectionWithHttpInfo($public_create_connection, string $contentType = self::contentTypes['createConnection'][0])
    {
        $request = $this->createConnectionRequest($public_create_connection, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\Connection',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createConnectionAsync
     *
     * Create Connection
     *
     * @param  \Ragie\Api\Model\PublicCreateConnection $public_create_connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConnectionAsync($public_create_connection, string $contentType = self::contentTypes['createConnection'][0])
    {
        return $this->createConnectionAsyncWithHttpInfo($public_create_connection, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createConnectionAsyncWithHttpInfo
     *
     * Create Connection
     *
     * @param  \Ragie\Api\Model\PublicCreateConnection $public_create_connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createConnectionAsyncWithHttpInfo($public_create_connection, string $contentType = self::contentTypes['createConnection'][0])
    {
        $returnType = '\Ragie\Api\Model\Connection';
        $request = $this->createConnectionRequest($public_create_connection, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createConnection'
     *
     * @param  \Ragie\Api\Model\PublicCreateConnection $public_create_connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createConnectionRequest($public_create_connection, string $contentType = self::contentTypes['createConnection'][0])
    {

        // verify the required parameter 'public_create_connection' is set
        if ($public_create_connection === null || (is_array($public_create_connection) && count($public_create_connection) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $public_create_connection when calling createConnection'
            );
        }


        $resourcePath = '/connection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($public_create_connection)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($public_create_connection));
            } else {
                $httpBody = $public_create_connection;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createOauthRedirectUrlConnectionsOauthPost
     *
     * Create Oauth Redirect Url
     *
     * @param  \Ragie\Api\Model\OAuthUrlCreate $o_auth_url_create o_auth_url_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\OAuthUrlResponse|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function createOauthRedirectUrlConnectionsOauthPost($o_auth_url_create, string $contentType = self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'][0])
    {
        list($response) = $this->createOauthRedirectUrlConnectionsOauthPostWithHttpInfo($o_auth_url_create, $contentType);
        return $response;
    }

    /**
     * Operation createOauthRedirectUrlConnectionsOauthPostWithHttpInfo
     *
     * Create Oauth Redirect Url
     *
     * @param  \Ragie\Api\Model\OAuthUrlCreate $o_auth_url_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\OAuthUrlResponse|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createOauthRedirectUrlConnectionsOauthPostWithHttpInfo($o_auth_url_create, string $contentType = self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'][0])
    {
        $request = $this->createOauthRedirectUrlConnectionsOauthPostRequest($o_auth_url_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\OAuthUrlResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\OAuthUrlResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\OAuthUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createOauthRedirectUrlConnectionsOauthPostAsync
     *
     * Create Oauth Redirect Url
     *
     * @param  \Ragie\Api\Model\OAuthUrlCreate $o_auth_url_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOauthRedirectUrlConnectionsOauthPostAsync($o_auth_url_create, string $contentType = self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'][0])
    {
        return $this->createOauthRedirectUrlConnectionsOauthPostAsyncWithHttpInfo($o_auth_url_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createOauthRedirectUrlConnectionsOauthPostAsyncWithHttpInfo
     *
     * Create Oauth Redirect Url
     *
     * @param  \Ragie\Api\Model\OAuthUrlCreate $o_auth_url_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createOauthRedirectUrlConnectionsOauthPostAsyncWithHttpInfo($o_auth_url_create, string $contentType = self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'][0])
    {
        $returnType = '\Ragie\Api\Model\OAuthUrlResponse';
        $request = $this->createOauthRedirectUrlConnectionsOauthPostRequest($o_auth_url_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createOauthRedirectUrlConnectionsOauthPost'
     *
     * @param  \Ragie\Api\Model\OAuthUrlCreate $o_auth_url_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createOauthRedirectUrlConnectionsOauthPostRequest($o_auth_url_create, string $contentType = self::contentTypes['createOauthRedirectUrlConnectionsOauthPost'][0])
    {

        // verify the required parameter 'o_auth_url_create' is set
        if ($o_auth_url_create === null || (is_array($o_auth_url_create) && count($o_auth_url_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $o_auth_url_create when calling createOauthRedirectUrlConnectionsOauthPost'
            );
        }


        $resourcePath = '/connections/oauth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($o_auth_url_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_url_create));
            } else {
                $httpBody = $o_auth_url_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteConnectionConnectionsConnectionIdDeletePost
     *
     * Delete Connection
     *
     * @param  string $connection_id connection_id (required)
     * @param  \Ragie\Api\Model\DeleteConnectionPayload $delete_connection_payload delete_connection_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,string>|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function deleteConnectionConnectionsConnectionIdDeletePost($connection_id, $delete_connection_payload, string $contentType = self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'][0])
    {
        list($response) = $this->deleteConnectionConnectionsConnectionIdDeletePostWithHttpInfo($connection_id, $delete_connection_payload, $contentType);
        return $response;
    }

    /**
     * Operation deleteConnectionConnectionsConnectionIdDeletePostWithHttpInfo
     *
     * Delete Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\DeleteConnectionPayload $delete_connection_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,string>|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteConnectionConnectionsConnectionIdDeletePostWithHttpInfo($connection_id, $delete_connection_payload, string $contentType = self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'][0])
    {
        $request = $this->deleteConnectionConnectionsConnectionIdDeletePostRequest($connection_id, $delete_connection_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,string>',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,string>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,string>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteConnectionConnectionsConnectionIdDeletePostAsync
     *
     * Delete Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\DeleteConnectionPayload $delete_connection_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConnectionConnectionsConnectionIdDeletePostAsync($connection_id, $delete_connection_payload, string $contentType = self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'][0])
    {
        return $this->deleteConnectionConnectionsConnectionIdDeletePostAsyncWithHttpInfo($connection_id, $delete_connection_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteConnectionConnectionsConnectionIdDeletePostAsyncWithHttpInfo
     *
     * Delete Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\DeleteConnectionPayload $delete_connection_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteConnectionConnectionsConnectionIdDeletePostAsyncWithHttpInfo($connection_id, $delete_connection_payload, string $contentType = self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'][0])
    {
        $returnType = 'array<string,string>';
        $request = $this->deleteConnectionConnectionsConnectionIdDeletePostRequest($connection_id, $delete_connection_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteConnectionConnectionsConnectionIdDeletePost'
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\DeleteConnectionPayload $delete_connection_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteConnectionConnectionsConnectionIdDeletePostRequest($connection_id, $delete_connection_payload, string $contentType = self::contentTypes['deleteConnectionConnectionsConnectionIdDeletePost'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling deleteConnectionConnectionsConnectionIdDeletePost'
            );
        }

        // verify the required parameter 'delete_connection_payload' is set
        if ($delete_connection_payload === null || (is_array($delete_connection_payload) && count($delete_connection_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_connection_payload when calling deleteConnectionConnectionsConnectionIdDeletePost'
            );
        }


        $resourcePath = '/connections/{connection_id}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_connection_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_connection_payload));
            } else {
                $httpBody = $delete_connection_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnectionConnectionsConnectionIdGet
     *
     * Get Connection
     *
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function getConnectionConnectionsConnectionIdGet($connection_id, string $contentType = self::contentTypes['getConnectionConnectionsConnectionIdGet'][0])
    {
        list($response) = $this->getConnectionConnectionsConnectionIdGetWithHttpInfo($connection_id, $contentType);
        return $response;
    }

    /**
     * Operation getConnectionConnectionsConnectionIdGetWithHttpInfo
     *
     * Get Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectionConnectionsConnectionIdGetWithHttpInfo($connection_id, string $contentType = self::contentTypes['getConnectionConnectionsConnectionIdGet'][0])
    {
        $request = $this->getConnectionConnectionsConnectionIdGetRequest($connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\Connection',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConnectionConnectionsConnectionIdGetAsync
     *
     * Get Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionConnectionsConnectionIdGetAsync($connection_id, string $contentType = self::contentTypes['getConnectionConnectionsConnectionIdGet'][0])
    {
        return $this->getConnectionConnectionsConnectionIdGetAsyncWithHttpInfo($connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectionConnectionsConnectionIdGetAsyncWithHttpInfo
     *
     * Get Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionConnectionsConnectionIdGetAsyncWithHttpInfo($connection_id, string $contentType = self::contentTypes['getConnectionConnectionsConnectionIdGet'][0])
    {
        $returnType = '\Ragie\Api\Model\Connection';
        $request = $this->getConnectionConnectionsConnectionIdGetRequest($connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnectionConnectionsConnectionIdGet'
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConnectionConnectionsConnectionIdGetRequest($connection_id, string $contentType = self::contentTypes['getConnectionConnectionsConnectionIdGet'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling getConnectionConnectionsConnectionIdGet'
            );
        }


        $resourcePath = '/connections/{connection_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnectionStatsConnectionsConnectionIdStatsGet
     *
     * Get Connection Stats
     *
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\ConnectionStats|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function getConnectionStatsConnectionsConnectionIdStatsGet($connection_id, string $contentType = self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'][0])
    {
        list($response) = $this->getConnectionStatsConnectionsConnectionIdStatsGetWithHttpInfo($connection_id, $contentType);
        return $response;
    }

    /**
     * Operation getConnectionStatsConnectionsConnectionIdStatsGetWithHttpInfo
     *
     * Get Connection Stats
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\ConnectionStats|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectionStatsConnectionsConnectionIdStatsGetWithHttpInfo($connection_id, string $contentType = self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'][0])
    {
        $request = $this->getConnectionStatsConnectionsConnectionIdStatsGetRequest($connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ConnectionStats',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\ConnectionStats',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ConnectionStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getConnectionStatsConnectionsConnectionIdStatsGetAsync
     *
     * Get Connection Stats
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionStatsConnectionsConnectionIdStatsGetAsync($connection_id, string $contentType = self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'][0])
    {
        return $this->getConnectionStatsConnectionsConnectionIdStatsGetAsyncWithHttpInfo($connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectionStatsConnectionsConnectionIdStatsGetAsyncWithHttpInfo
     *
     * Get Connection Stats
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectionStatsConnectionsConnectionIdStatsGetAsyncWithHttpInfo($connection_id, string $contentType = self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'][0])
    {
        $returnType = '\Ragie\Api\Model\ConnectionStats';
        $request = $this->getConnectionStatsConnectionsConnectionIdStatsGetRequest($connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnectionStatsConnectionsConnectionIdStatsGet'
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConnectionStatsConnectionsConnectionIdStatsGetRequest($connection_id, string $contentType = self::contentTypes['getConnectionStatsConnectionsConnectionIdStatsGet'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling getConnectionStatsConnectionsConnectionIdStatsGet'
            );
        }


        $resourcePath = '/connections/{connection_id}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listConnectionSourceTypesConnectionsSourceTypeGet
     *
     * List Connection Source Types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\ListConnectorSourceTypeInfo|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage
     */
    public function listConnectionSourceTypesConnectionsSourceTypeGet(string $contentType = self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'][0])
    {
        list($response) = $this->listConnectionSourceTypesConnectionsSourceTypeGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listConnectionSourceTypesConnectionsSourceTypeGetWithHttpInfo
     *
     * List Connection Source Types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\ListConnectorSourceTypeInfo|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage, HTTP status code, HTTP response headers (array of strings)
     */
    public function listConnectionSourceTypesConnectionsSourceTypeGetWithHttpInfo(string $contentType = self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'][0])
    {
        $request = $this->listConnectionSourceTypesConnectionsSourceTypeGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ListConnectorSourceTypeInfo',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\ListConnectorSourceTypeInfo',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ListConnectorSourceTypeInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listConnectionSourceTypesConnectionsSourceTypeGetAsync
     *
     * List Connection Source Types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConnectionSourceTypesConnectionsSourceTypeGetAsync(string $contentType = self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'][0])
    {
        return $this->listConnectionSourceTypesConnectionsSourceTypeGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listConnectionSourceTypesConnectionsSourceTypeGetAsyncWithHttpInfo
     *
     * List Connection Source Types
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConnectionSourceTypesConnectionsSourceTypeGetAsyncWithHttpInfo(string $contentType = self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'][0])
    {
        $returnType = '\Ragie\Api\Model\ListConnectorSourceTypeInfo';
        $request = $this->listConnectionSourceTypesConnectionsSourceTypeGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listConnectionSourceTypesConnectionsSourceTypeGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listConnectionSourceTypesConnectionsSourceTypeGetRequest(string $contentType = self::contentTypes['listConnectionSourceTypesConnectionsSourceTypeGet'][0])
    {


        $resourcePath = '/connections/source-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listConnectionsConnectionsGet
     *
     * List Connections
     *
     * @param  string|null $cursor An opaque cursor for pagination (optional)
     * @param  int|null $page_size The number of items per page (must be greater than 0 and less than or equal to 100) (optional, default to 10)
     * @param  string|null $filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples. (optional)
     * @param  string|null $partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionsConnectionsGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\ConnectionList|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function listConnectionsConnectionsGet($cursor = null, $page_size = 10, $filter = null, $partition = null, string $contentType = self::contentTypes['listConnectionsConnectionsGet'][0])
    {
        list($response) = $this->listConnectionsConnectionsGetWithHttpInfo($cursor, $page_size, $filter, $partition, $contentType);
        return $response;
    }

    /**
     * Operation listConnectionsConnectionsGetWithHttpInfo
     *
     * List Connections
     *
     * @param  string|null $cursor An opaque cursor for pagination (optional)
     * @param  int|null $page_size The number of items per page (must be greater than 0 and less than or equal to 100) (optional, default to 10)
     * @param  string|null $filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples. (optional)
     * @param  string|null $partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionsConnectionsGet'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\ConnectionList|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listConnectionsConnectionsGetWithHttpInfo($cursor = null, $page_size = 10, $filter = null, $partition = null, string $contentType = self::contentTypes['listConnectionsConnectionsGet'][0])
    {
        $request = $this->listConnectionsConnectionsGetRequest($cursor, $page_size, $filter, $partition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ConnectionList',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\ConnectionList',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ConnectionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listConnectionsConnectionsGetAsync
     *
     * List Connections
     *
     * @param  string|null $cursor An opaque cursor for pagination (optional)
     * @param  int|null $page_size The number of items per page (must be greater than 0 and less than or equal to 100) (optional, default to 10)
     * @param  string|null $filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples. (optional)
     * @param  string|null $partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionsConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConnectionsConnectionsGetAsync($cursor = null, $page_size = 10, $filter = null, $partition = null, string $contentType = self::contentTypes['listConnectionsConnectionsGet'][0])
    {
        return $this->listConnectionsConnectionsGetAsyncWithHttpInfo($cursor, $page_size, $filter, $partition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listConnectionsConnectionsGetAsyncWithHttpInfo
     *
     * List Connections
     *
     * @param  string|null $cursor An opaque cursor for pagination (optional)
     * @param  int|null $page_size The number of items per page (must be greater than 0 and less than or equal to 100) (optional, default to 10)
     * @param  string|null $filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples. (optional)
     * @param  string|null $partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionsConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listConnectionsConnectionsGetAsyncWithHttpInfo($cursor = null, $page_size = 10, $filter = null, $partition = null, string $contentType = self::contentTypes['listConnectionsConnectionsGet'][0])
    {
        $returnType = '\Ragie\Api\Model\ConnectionList';
        $request = $this->listConnectionsConnectionsGetRequest($cursor, $page_size, $filter, $partition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listConnectionsConnectionsGet'
     *
     * @param  string|null $cursor An opaque cursor for pagination (optional)
     * @param  int|null $page_size The number of items per page (must be greater than 0 and less than or equal to 100) (optional, default to 10)
     * @param  string|null $filter The metadata search filter. Returns only items which match the filter. The following filter operators are supported: $eq - Equal to (number, string, boolean), $ne - Not equal to (number, string, boolean), $gt - Greater than (number), $gte - Greater than or equal to (number), $lt - Less than (number), $lte - Less than or equal to (number), $in - In array (string or number), $nin - Not in array (string or number). The operators can be combined with AND and OR. Read [Metadata &amp; Filters guide](https://docs.ragie.ai/docs/metadata-filters) for more details and examples. (optional)
     * @param  string|null $partition An optional partition to scope the request to. If omitted, the request will be scoped to the default partition. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listConnectionsConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listConnectionsConnectionsGetRequest($cursor = null, $page_size = 10, $filter = null, $partition = null, string $contentType = self::contentTypes['listConnectionsConnectionsGet'][0])
    {


        if ($page_size !== null && $page_size > 100) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ConnectionsApi.listConnectionsConnectionsGet, must be smaller than or equal to 100.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling ConnectionsApi.listConnectionsConnectionsGet, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($partition !== null) {
            $headerParams['partition'] = ObjectSerializer::toHeaderValue($partition);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setConnectionEnabledConnectionsConnectionIdEnabledPut
     *
     * Set Connection Enabled
     *
     * @param  string $connection_id connection_id (required)
     * @param  \Ragie\Api\Model\SetConnectionEnabledPayload $set_connection_enabled_payload set_connection_enabled_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function setConnectionEnabledConnectionsConnectionIdEnabledPut($connection_id, $set_connection_enabled_payload, string $contentType = self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'][0])
    {
        list($response) = $this->setConnectionEnabledConnectionsConnectionIdEnabledPutWithHttpInfo($connection_id, $set_connection_enabled_payload, $contentType);
        return $response;
    }

    /**
     * Operation setConnectionEnabledConnectionsConnectionIdEnabledPutWithHttpInfo
     *
     * Set Connection Enabled
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\SetConnectionEnabledPayload $set_connection_enabled_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setConnectionEnabledConnectionsConnectionIdEnabledPutWithHttpInfo($connection_id, $set_connection_enabled_payload, string $contentType = self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'][0])
    {
        $request = $this->setConnectionEnabledConnectionsConnectionIdEnabledPutRequest($connection_id, $set_connection_enabled_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\Connection',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setConnectionEnabledConnectionsConnectionIdEnabledPutAsync
     *
     * Set Connection Enabled
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\SetConnectionEnabledPayload $set_connection_enabled_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConnectionEnabledConnectionsConnectionIdEnabledPutAsync($connection_id, $set_connection_enabled_payload, string $contentType = self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'][0])
    {
        return $this->setConnectionEnabledConnectionsConnectionIdEnabledPutAsyncWithHttpInfo($connection_id, $set_connection_enabled_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setConnectionEnabledConnectionsConnectionIdEnabledPutAsyncWithHttpInfo
     *
     * Set Connection Enabled
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\SetConnectionEnabledPayload $set_connection_enabled_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConnectionEnabledConnectionsConnectionIdEnabledPutAsyncWithHttpInfo($connection_id, $set_connection_enabled_payload, string $contentType = self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'][0])
    {
        $returnType = '\Ragie\Api\Model\Connection';
        $request = $this->setConnectionEnabledConnectionsConnectionIdEnabledPutRequest($connection_id, $set_connection_enabled_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setConnectionEnabledConnectionsConnectionIdEnabledPut'
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\SetConnectionEnabledPayload $set_connection_enabled_payload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setConnectionEnabledConnectionsConnectionIdEnabledPutRequest($connection_id, $set_connection_enabled_payload, string $contentType = self::contentTypes['setConnectionEnabledConnectionsConnectionIdEnabledPut'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling setConnectionEnabledConnectionsConnectionIdEnabledPut'
            );
        }

        // verify the required parameter 'set_connection_enabled_payload' is set
        if ($set_connection_enabled_payload === null || (is_array($set_connection_enabled_payload) && count($set_connection_enabled_payload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $set_connection_enabled_payload when calling setConnectionEnabledConnectionsConnectionIdEnabledPut'
            );
        }


        $resourcePath = '/connections/{connection_id}/enabled';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($set_connection_enabled_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($set_connection_enabled_payload));
            } else {
                $httpBody = $set_connection_enabled_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setConnectionLimitsConnectionsConnectionIdLimitPut
     *
     * Set Connection Limits
     *
     * @param  string $connection_id connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionLimitParams $connection_limit_params connection_limit_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function setConnectionLimitsConnectionsConnectionIdLimitPut($connection_id, $connection_limit_params, string $contentType = self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'][0])
    {
        list($response) = $this->setConnectionLimitsConnectionsConnectionIdLimitPutWithHttpInfo($connection_id, $connection_limit_params, $contentType);
        return $response;
    }

    /**
     * Operation setConnectionLimitsConnectionsConnectionIdLimitPutWithHttpInfo
     *
     * Set Connection Limits
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionLimitParams $connection_limit_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function setConnectionLimitsConnectionsConnectionIdLimitPutWithHttpInfo($connection_id, $connection_limit_params, string $contentType = self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'][0])
    {
        $request = $this->setConnectionLimitsConnectionsConnectionIdLimitPutRequest($connection_id, $connection_limit_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\Connection',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setConnectionLimitsConnectionsConnectionIdLimitPutAsync
     *
     * Set Connection Limits
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionLimitParams $connection_limit_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConnectionLimitsConnectionsConnectionIdLimitPutAsync($connection_id, $connection_limit_params, string $contentType = self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'][0])
    {
        return $this->setConnectionLimitsConnectionsConnectionIdLimitPutAsyncWithHttpInfo($connection_id, $connection_limit_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setConnectionLimitsConnectionsConnectionIdLimitPutAsyncWithHttpInfo
     *
     * Set Connection Limits
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionLimitParams $connection_limit_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConnectionLimitsConnectionsConnectionIdLimitPutAsyncWithHttpInfo($connection_id, $connection_limit_params, string $contentType = self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'][0])
    {
        $returnType = '\Ragie\Api\Model\Connection';
        $request = $this->setConnectionLimitsConnectionsConnectionIdLimitPutRequest($connection_id, $connection_limit_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setConnectionLimitsConnectionsConnectionIdLimitPut'
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionLimitParams $connection_limit_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setConnectionLimitsConnectionsConnectionIdLimitPutRequest($connection_id, $connection_limit_params, string $contentType = self::contentTypes['setConnectionLimitsConnectionsConnectionIdLimitPut'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling setConnectionLimitsConnectionsConnectionIdLimitPut'
            );
        }

        // verify the required parameter 'connection_limit_params' is set
        if ($connection_limit_params === null || (is_array($connection_limit_params) && count($connection_limit_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_limit_params when calling setConnectionLimitsConnectionsConnectionIdLimitPut'
            );
        }


        $resourcePath = '/connections/{connection_id}/limit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($connection_limit_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($connection_limit_params));
            } else {
                $httpBody = $connection_limit_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncConnection
     *
     * Sync Connection
     *
     * @param  string $connection_id connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConnection'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\ResponseOK|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function syncConnection($connection_id, string $contentType = self::contentTypes['syncConnection'][0])
    {
        list($response) = $this->syncConnectionWithHttpInfo($connection_id, $contentType);
        return $response;
    }

    /**
     * Operation syncConnectionWithHttpInfo
     *
     * Sync Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConnection'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\ResponseOK|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncConnectionWithHttpInfo($connection_id, string $contentType = self::contentTypes['syncConnection'][0])
    {
        $request = $this->syncConnectionRequest($connection_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ResponseOK',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\ResponseOK',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ResponseOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation syncConnectionAsync
     *
     * Sync Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncConnectionAsync($connection_id, string $contentType = self::contentTypes['syncConnection'][0])
    {
        return $this->syncConnectionAsyncWithHttpInfo($connection_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncConnectionAsyncWithHttpInfo
     *
     * Sync Connection
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncConnectionAsyncWithHttpInfo($connection_id, string $contentType = self::contentTypes['syncConnection'][0])
    {
        $returnType = '\Ragie\Api\Model\ResponseOK';
        $request = $this->syncConnectionRequest($connection_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncConnection'
     *
     * @param  string $connection_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syncConnection'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syncConnectionRequest($connection_id, string $contentType = self::contentTypes['syncConnection'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling syncConnection'
            );
        }


        $resourcePath = '/connections/{connection_id}/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateConnectionConnectionsConnectionIdPut
     *
     * Update Connection
     *
     * @param  string $connection_id connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionBase $connection_base connection_base (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnectionConnectionsConnectionIdPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError
     */
    public function updateConnectionConnectionsConnectionIdPut($connection_id, $connection_base, string $contentType = self::contentTypes['updateConnectionConnectionsConnectionIdPut'][0])
    {
        list($response) = $this->updateConnectionConnectionsConnectionIdPutWithHttpInfo($connection_id, $connection_base, $contentType);
        return $response;
    }

    /**
     * Operation updateConnectionConnectionsConnectionIdPutWithHttpInfo
     *
     * Update Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionBase $connection_base (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnectionConnectionsConnectionIdPut'] to see the possible values for this operation
     *
     * @throws \Ragie\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Ragie\Api\Model\Connection|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\ErrorMessage|\Ragie\Api\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConnectionConnectionsConnectionIdPutWithHttpInfo($connection_id, $connection_base, string $contentType = self::contentTypes['updateConnectionConnectionsConnectionIdPut'][0])
    {
        $request = $this->updateConnectionConnectionsConnectionIdPutRequest($connection_id, $connection_base, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\Connection',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 402:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\ErrorMessage',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Ragie\Api\Model\HTTPValidationError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Ragie\Api\Model\Connection',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\Connection',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 402:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\ErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ragie\Api\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateConnectionConnectionsConnectionIdPutAsync
     *
     * Update Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionBase $connection_base (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnectionConnectionsConnectionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConnectionConnectionsConnectionIdPutAsync($connection_id, $connection_base, string $contentType = self::contentTypes['updateConnectionConnectionsConnectionIdPut'][0])
    {
        return $this->updateConnectionConnectionsConnectionIdPutAsyncWithHttpInfo($connection_id, $connection_base, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConnectionConnectionsConnectionIdPutAsyncWithHttpInfo
     *
     * Update Connection
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionBase $connection_base (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnectionConnectionsConnectionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConnectionConnectionsConnectionIdPutAsyncWithHttpInfo($connection_id, $connection_base, string $contentType = self::contentTypes['updateConnectionConnectionsConnectionIdPut'][0])
    {
        $returnType = '\Ragie\Api\Model\Connection';
        $request = $this->updateConnectionConnectionsConnectionIdPutRequest($connection_id, $connection_base, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateConnectionConnectionsConnectionIdPut'
     *
     * @param  string $connection_id (required)
     * @param  \Ragie\Api\Model\ConnectionBase $connection_base (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConnectionConnectionsConnectionIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConnectionConnectionsConnectionIdPutRequest($connection_id, $connection_base, string $contentType = self::contentTypes['updateConnectionConnectionsConnectionIdPut'][0])
    {

        // verify the required parameter 'connection_id' is set
        if ($connection_id === null || (is_array($connection_id) && count($connection_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_id when calling updateConnectionConnectionsConnectionIdPut'
            );
        }

        // verify the required parameter 'connection_base' is set
        if ($connection_base === null || (is_array($connection_base) && count($connection_base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connection_base when calling updateConnectionConnectionsConnectionIdPut'
            );
        }


        $resourcePath = '/connections/{connection_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connection_id !== null) {
            $resourcePath = str_replace(
                '{' . 'connection_id' . '}',
                ObjectSerializer::toPathValue($connection_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($connection_base)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($connection_base));
            } else {
                $httpBody = $connection_base;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
