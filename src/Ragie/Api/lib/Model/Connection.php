<?php
/**
 * Connection
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Model;

use \ArrayAccess;
use \Ragie\Api\ObjectSerializer;

/**
 * Connection Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Connection implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Connection';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'metadata' => 'array<string,\Ragie\Api\Model\MetadataValue>',
        'type' => 'string',
        'name' => 'string',
        'source' => '\Ragie\Api\Model\Source',
        'enabled' => 'bool',
        'disabled_by_system_reason' => 'string',
        'last_synced_at' => '\DateTime',
        'syncing' => 'bool',
        'partition' => 'string',
        'page_limit' => 'int',
        'disabled_by_system' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'metadata' => null,
        'type' => null,
        'name' => null,
        'source' => null,
        'enabled' => null,
        'disabled_by_system_reason' => null,
        'last_synced_at' => 'date-time',
        'syncing' => null,
        'partition' => null,
        'page_limit' => null,
        'disabled_by_system' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'created_at' => false,
        'updated_at' => false,
        'metadata' => false,
        'type' => false,
        'name' => false,
        'source' => true,
        'enabled' => false,
        'disabled_by_system_reason' => true,
        'last_synced_at' => true,
        'syncing' => true,
        'partition' => true,
        'page_limit' => true,
        'disabled_by_system' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'metadata' => 'metadata',
        'type' => 'type',
        'name' => 'name',
        'source' => 'source',
        'enabled' => 'enabled',
        'disabled_by_system_reason' => 'disabled_by_system_reason',
        'last_synced_at' => 'last_synced_at',
        'syncing' => 'syncing',
        'partition' => 'partition',
        'page_limit' => 'page_limit',
        'disabled_by_system' => 'disabled_by_system'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'metadata' => 'setMetadata',
        'type' => 'setType',
        'name' => 'setName',
        'source' => 'setSource',
        'enabled' => 'setEnabled',
        'disabled_by_system_reason' => 'setDisabledBySystemReason',
        'last_synced_at' => 'setLastSyncedAt',
        'syncing' => 'setSyncing',
        'partition' => 'setPartition',
        'page_limit' => 'setPageLimit',
        'disabled_by_system' => 'setDisabledBySystem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'metadata' => 'getMetadata',
        'type' => 'getType',
        'name' => 'getName',
        'source' => 'getSource',
        'enabled' => 'getEnabled',
        'disabled_by_system_reason' => 'getDisabledBySystemReason',
        'last_synced_at' => 'getLastSyncedAt',
        'syncing' => 'getSyncing',
        'partition' => 'getPartition',
        'page_limit' => 'getPageLimit',
        'disabled_by_system' => 'getDisabledBySystem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DISABLED_BY_SYSTEM_REASON_CONNECTION_OVER_TOTAL_PAGE_LIMIT = 'connection_over_total_page_limit';
    public const DISABLED_BY_SYSTEM_REASON_AUTHENTICATION_FAILED = 'authentication_failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisabledBySystemReasonAllowableValues()
    {
        return [
            self::DISABLED_BY_SYSTEM_REASON_CONNECTION_OVER_TOTAL_PAGE_LIMIT,
            self::DISABLED_BY_SYSTEM_REASON_AUTHENTICATION_FAILED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('disabled_by_system_reason', $data ?? [], null);
        $this->setIfExists('last_synced_at', $data ?? [], null);
        $this->setIfExists('syncing', $data ?? [], null);
        $this->setIfExists('partition', $data ?? [], null);
        $this->setIfExists('page_limit', $data ?? [], null);
        $this->setIfExists('disabled_by_system', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['disabled_by_system_reason'] === null) {
            $invalidProperties[] = "'disabled_by_system_reason' can't be null";
        }
        $allowedValues = $this->getDisabledBySystemReasonAllowableValues();
        if (!is_null($this->container['disabled_by_system_reason']) && !in_array($this->container['disabled_by_system_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'disabled_by_system_reason', must be one of '%s'",
                $this->container['disabled_by_system_reason'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['page_limit'] === null) {
            $invalidProperties[] = "'page_limit' can't be null";
        }
        if ($this->container['disabled_by_system'] === null) {
            $invalidProperties[] = "'disabled_by_system' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,\Ragie\Api\Model\MetadataValue>
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,\Ragie\Api\Model\MetadataValue> $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Ragie\Api\Model\Source
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Ragie\Api\Model\Source $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets disabled_by_system_reason
     *
     * @return string
     */
    public function getDisabledBySystemReason()
    {
        return $this->container['disabled_by_system_reason'];
    }

    /**
     * Sets disabled_by_system_reason
     *
     * @param string $disabled_by_system_reason disabled_by_system_reason
     *
     * @return self
     */
    public function setDisabledBySystemReason($disabled_by_system_reason)
    {
        if (is_null($disabled_by_system_reason)) {
            array_push($this->openAPINullablesSetToNull, 'disabled_by_system_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disabled_by_system_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDisabledBySystemReasonAllowableValues();
        if (!is_null($disabled_by_system_reason) && !in_array($disabled_by_system_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'disabled_by_system_reason', must be one of '%s'",
                    $disabled_by_system_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disabled_by_system_reason'] = $disabled_by_system_reason;

        return $this;
    }

    /**
     * Gets last_synced_at
     *
     * @return \DateTime|null
     */
    public function getLastSyncedAt()
    {
        return $this->container['last_synced_at'];
    }

    /**
     * Sets last_synced_at
     *
     * @param \DateTime|null $last_synced_at last_synced_at
     *
     * @return self
     */
    public function setLastSyncedAt($last_synced_at)
    {
        if (is_null($last_synced_at)) {
            array_push($this->openAPINullablesSetToNull, 'last_synced_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_synced_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_synced_at'] = $last_synced_at;

        return $this;
    }

    /**
     * Gets syncing
     *
     * @return bool|null
     */
    public function getSyncing()
    {
        return $this->container['syncing'];
    }

    /**
     * Sets syncing
     *
     * @param bool|null $syncing syncing
     *
     * @return self
     */
    public function setSyncing($syncing)
    {
        if (is_null($syncing)) {
            array_push($this->openAPINullablesSetToNull, 'syncing');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('syncing', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['syncing'] = $syncing;

        return $this;
    }

    /**
     * Gets partition
     *
     * @return string|null
     */
    public function getPartition()
    {
        return $this->container['partition'];
    }

    /**
     * Sets partition
     *
     * @param string|null $partition partition
     *
     * @return self
     */
    public function setPartition($partition)
    {
        if (is_null($partition)) {
            array_push($this->openAPINullablesSetToNull, 'partition');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('partition', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['partition'] = $partition;

        return $this;
    }

    /**
     * Gets page_limit
     *
     * @return int
     */
    public function getPageLimit()
    {
        return $this->container['page_limit'];
    }

    /**
     * Sets page_limit
     *
     * @param int $page_limit page_limit
     *
     * @return self
     */
    public function setPageLimit($page_limit)
    {
        if (is_null($page_limit)) {
            array_push($this->openAPINullablesSetToNull, 'page_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['page_limit'] = $page_limit;

        return $this;
    }

    /**
     * Gets disabled_by_system
     *
     * @return bool
     */
    public function getDisabledBySystem()
    {
        return $this->container['disabled_by_system'];
    }

    /**
     * Sets disabled_by_system
     *
     * @param bool $disabled_by_system disabled_by_system
     *
     * @return self
     */
    public function setDisabledBySystem($disabled_by_system)
    {
        if (is_null($disabled_by_system)) {
            throw new \InvalidArgumentException('non-nullable disabled_by_system cannot be null');
        }
        $this->container['disabled_by_system'] = $disabled_by_system;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


