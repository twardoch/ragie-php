<?php
/**
 * ConnectionSyncStartedWebhookPayload
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Model;

use \ArrayAccess;
use \Ragie\Api\ObjectSerializer;

/**
 * ConnectionSyncStartedWebhookPayload Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConnectionSyncStartedWebhookPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConnectionSyncStartedWebhookPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'connection_id' => 'string',
        'sync_id' => 'string',
        'partition' => 'string',
        'connection_metadata' => 'array<string,mixed>',
        'create_count' => 'int',
        'update_content_count' => 'int',
        'update_metadata_count' => 'int',
        'delete_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'connection_id' => null,
        'sync_id' => null,
        'partition' => null,
        'connection_metadata' => null,
        'create_count' => null,
        'update_content_count' => null,
        'update_metadata_count' => null,
        'delete_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'connection_id' => false,
        'sync_id' => false,
        'partition' => false,
        'connection_metadata' => false,
        'create_count' => false,
        'update_content_count' => false,
        'update_metadata_count' => false,
        'delete_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'connection_id' => 'connection_id',
        'sync_id' => 'sync_id',
        'partition' => 'partition',
        'connection_metadata' => 'connection_metadata',
        'create_count' => 'create_count',
        'update_content_count' => 'update_content_count',
        'update_metadata_count' => 'update_metadata_count',
        'delete_count' => 'delete_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'connection_id' => 'setConnectionId',
        'sync_id' => 'setSyncId',
        'partition' => 'setPartition',
        'connection_metadata' => 'setConnectionMetadata',
        'create_count' => 'setCreateCount',
        'update_content_count' => 'setUpdateContentCount',
        'update_metadata_count' => 'setUpdateMetadataCount',
        'delete_count' => 'setDeleteCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'connection_id' => 'getConnectionId',
        'sync_id' => 'getSyncId',
        'partition' => 'getPartition',
        'connection_metadata' => 'getConnectionMetadata',
        'create_count' => 'getCreateCount',
        'update_content_count' => 'getUpdateContentCount',
        'update_metadata_count' => 'getUpdateMetadataCount',
        'delete_count' => 'getDeleteCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('connection_id', $data ?? [], null);
        $this->setIfExists('sync_id', $data ?? [], null);
        $this->setIfExists('partition', $data ?? [], null);
        $this->setIfExists('connection_metadata', $data ?? [], null);
        $this->setIfExists('create_count', $data ?? [], null);
        $this->setIfExists('update_content_count', $data ?? [], null);
        $this->setIfExists('update_metadata_count', $data ?? [], null);
        $this->setIfExists('delete_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['connection_id'] === null) {
            $invalidProperties[] = "'connection_id' can't be null";
        }
        if ($this->container['sync_id'] === null) {
            $invalidProperties[] = "'sync_id' can't be null";
        }
        if ($this->container['partition'] === null) {
            $invalidProperties[] = "'partition' can't be null";
        }
        if ($this->container['connection_metadata'] === null) {
            $invalidProperties[] = "'connection_metadata' can't be null";
        }
        if ($this->container['create_count'] === null) {
            $invalidProperties[] = "'create_count' can't be null";
        }
        if ($this->container['update_content_count'] === null) {
            $invalidProperties[] = "'update_content_count' can't be null";
        }
        if ($this->container['update_metadata_count'] === null) {
            $invalidProperties[] = "'update_metadata_count' can't be null";
        }
        if ($this->container['delete_count'] === null) {
            $invalidProperties[] = "'delete_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets connection_id
     *
     * @return string
     */
    public function getConnectionId()
    {
        return $this->container['connection_id'];
    }

    /**
     * Sets connection_id
     *
     * @param string $connection_id connection_id
     *
     * @return self
     */
    public function setConnectionId($connection_id)
    {
        if (is_null($connection_id)) {
            throw new \InvalidArgumentException('non-nullable connection_id cannot be null');
        }
        $this->container['connection_id'] = $connection_id;

        return $this;
    }

    /**
     * Gets sync_id
     *
     * @return string
     */
    public function getSyncId()
    {
        return $this->container['sync_id'];
    }

    /**
     * Sets sync_id
     *
     * @param string $sync_id sync_id
     *
     * @return self
     */
    public function setSyncId($sync_id)
    {
        if (is_null($sync_id)) {
            throw new \InvalidArgumentException('non-nullable sync_id cannot be null');
        }
        $this->container['sync_id'] = $sync_id;

        return $this;
    }

    /**
     * Gets partition
     *
     * @return string
     */
    public function getPartition()
    {
        return $this->container['partition'];
    }

    /**
     * Sets partition
     *
     * @param string $partition partition
     *
     * @return self
     */
    public function setPartition($partition)
    {
        if (is_null($partition)) {
            throw new \InvalidArgumentException('non-nullable partition cannot be null');
        }
        $this->container['partition'] = $partition;

        return $this;
    }

    /**
     * Gets connection_metadata
     *
     * @return array<string,mixed>
     */
    public function getConnectionMetadata()
    {
        return $this->container['connection_metadata'];
    }

    /**
     * Sets connection_metadata
     *
     * @param array<string,mixed> $connection_metadata connection_metadata
     *
     * @return self
     */
    public function setConnectionMetadata($connection_metadata)
    {
        if (is_null($connection_metadata)) {
            throw new \InvalidArgumentException('non-nullable connection_metadata cannot be null');
        }
        $this->container['connection_metadata'] = $connection_metadata;

        return $this;
    }

    /**
     * Gets create_count
     *
     * @return int
     */
    public function getCreateCount()
    {
        return $this->container['create_count'];
    }

    /**
     * Sets create_count
     *
     * @param int $create_count create_count
     *
     * @return self
     */
    public function setCreateCount($create_count)
    {
        if (is_null($create_count)) {
            throw new \InvalidArgumentException('non-nullable create_count cannot be null');
        }
        $this->container['create_count'] = $create_count;

        return $this;
    }

    /**
     * Gets update_content_count
     *
     * @return int
     */
    public function getUpdateContentCount()
    {
        return $this->container['update_content_count'];
    }

    /**
     * Sets update_content_count
     *
     * @param int $update_content_count update_content_count
     *
     * @return self
     */
    public function setUpdateContentCount($update_content_count)
    {
        if (is_null($update_content_count)) {
            throw new \InvalidArgumentException('non-nullable update_content_count cannot be null');
        }
        $this->container['update_content_count'] = $update_content_count;

        return $this;
    }

    /**
     * Gets update_metadata_count
     *
     * @return int
     */
    public function getUpdateMetadataCount()
    {
        return $this->container['update_metadata_count'];
    }

    /**
     * Sets update_metadata_count
     *
     * @param int $update_metadata_count update_metadata_count
     *
     * @return self
     */
    public function setUpdateMetadataCount($update_metadata_count)
    {
        if (is_null($update_metadata_count)) {
            throw new \InvalidArgumentException('non-nullable update_metadata_count cannot be null');
        }
        $this->container['update_metadata_count'] = $update_metadata_count;

        return $this;
    }

    /**
     * Gets delete_count
     *
     * @return int
     */
    public function getDeleteCount()
    {
        return $this->container['delete_count'];
    }

    /**
     * Sets delete_count
     *
     * @param int $delete_count delete_count
     *
     * @return self
     */
    public function setDeleteCount($delete_count)
    {
        if (is_null($delete_count)) {
            throw new \InvalidArgumentException('non-nullable delete_count cannot be null');
        }
        $this->container['delete_count'] = $delete_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


