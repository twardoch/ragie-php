<?php
/**
 * FinalAnswerStepsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Model;

use \ArrayAccess;
use \Ragie\Api\ObjectSerializer;

/**
 * FinalAnswerStepsInner Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FinalAnswerStepsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinalAnswer_steps_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'think' => 'string',
        'current_question' => 'string',
        'other_resolved_question_ids' => 'string[]',
        'answer' => '\Ragie\Api\Model\Answer',
        'search' => '\Ragie\Api\Model\Search',
        'query_details' => '\Ragie\Api\Model\QueryDetails[]',
        'search_log' => 'string',
        'questions_to_answer' => 'string[]',
        'code_issue' => 'string',
        'code' => 'string',
        'code_result' => 'string',
        'partial_answer' => '\Ragie\Api\Model\Answer',
        'eval_passed' => 'bool',
        'eval_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'think' => null,
        'current_question' => null,
        'other_resolved_question_ids' => null,
        'answer' => null,
        'search' => null,
        'query_details' => null,
        'search_log' => null,
        'questions_to_answer' => null,
        'code_issue' => null,
        'code' => null,
        'code_result' => null,
        'partial_answer' => null,
        'eval_passed' => null,
        'eval_reason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'think' => false,
        'current_question' => false,
        'other_resolved_question_ids' => false,
        'answer' => false,
        'search' => false,
        'query_details' => false,
        'search_log' => false,
        'questions_to_answer' => false,
        'code_issue' => false,
        'code' => false,
        'code_result' => false,
        'partial_answer' => false,
        'eval_passed' => false,
        'eval_reason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'think' => 'think',
        'current_question' => 'current_question',
        'other_resolved_question_ids' => 'other_resolved_question_ids',
        'answer' => 'answer',
        'search' => 'search',
        'query_details' => 'query_details',
        'search_log' => 'search_log',
        'questions_to_answer' => 'questions_to_answer',
        'code_issue' => 'code_issue',
        'code' => 'code',
        'code_result' => 'code_result',
        'partial_answer' => 'partial_answer',
        'eval_passed' => 'eval_passed',
        'eval_reason' => 'eval_reason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'think' => 'setThink',
        'current_question' => 'setCurrentQuestion',
        'other_resolved_question_ids' => 'setOtherResolvedQuestionIds',
        'answer' => 'setAnswer',
        'search' => 'setSearch',
        'query_details' => 'setQueryDetails',
        'search_log' => 'setSearchLog',
        'questions_to_answer' => 'setQuestionsToAnswer',
        'code_issue' => 'setCodeIssue',
        'code' => 'setCode',
        'code_result' => 'setCodeResult',
        'partial_answer' => 'setPartialAnswer',
        'eval_passed' => 'setEvalPassed',
        'eval_reason' => 'setEvalReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'think' => 'getThink',
        'current_question' => 'getCurrentQuestion',
        'other_resolved_question_ids' => 'getOtherResolvedQuestionIds',
        'answer' => 'getAnswer',
        'search' => 'getSearch',
        'query_details' => 'getQueryDetails',
        'search_log' => 'getSearchLog',
        'questions_to_answer' => 'getQuestionsToAnswer',
        'code_issue' => 'getCodeIssue',
        'code' => 'getCode',
        'code_result' => 'getCodeResult',
        'partial_answer' => 'getPartialAnswer',
        'eval_passed' => 'getEvalPassed',
        'eval_reason' => 'getEvalReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ANSWER = 'answer';
    public const TYPE_BASE_SEARCH = 'base_search';
    public const TYPE_SEARCH = 'search';
    public const TYPE_PLAN = 'plan';
    public const TYPE_CODE = 'code';
    public const TYPE_SURRENDER = 'surrender';
    public const TYPE_EVALUATED_ANSWER = 'evaluated_answer';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ANSWER,
            self::TYPE_BASE_SEARCH,
            self::TYPE_SEARCH,
            self::TYPE_PLAN,
            self::TYPE_CODE,
            self::TYPE_SURRENDER,
            self::TYPE_EVALUATED_ANSWER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], 'answer');
        $this->setIfExists('think', $data ?? [], null);
        $this->setIfExists('current_question', $data ?? [], null);
        $this->setIfExists('other_resolved_question_ids', $data ?? [], null);
        $this->setIfExists('answer', $data ?? [], null);
        $this->setIfExists('search', $data ?? [], null);
        $this->setIfExists('query_details', $data ?? [], null);
        $this->setIfExists('search_log', $data ?? [], '');
        $this->setIfExists('questions_to_answer', $data ?? [], null);
        $this->setIfExists('code_issue', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], '');
        $this->setIfExists('code_result', $data ?? [], '');
        $this->setIfExists('partial_answer', $data ?? [], null);
        $this->setIfExists('eval_passed', $data ?? [], null);
        $this->setIfExists('eval_reason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['think'] === null) {
            $invalidProperties[] = "'think' can't be null";
        }
        if ($this->container['current_question'] === null) {
            $invalidProperties[] = "'current_question' can't be null";
        }
        if ($this->container['answer'] === null) {
            $invalidProperties[] = "'answer' can't be null";
        }
        if ($this->container['search'] === null) {
            $invalidProperties[] = "'search' can't be null";
        }
        if ($this->container['code_issue'] === null) {
            $invalidProperties[] = "'code_issue' can't be null";
        }
        if ($this->container['partial_answer'] === null) {
            $invalidProperties[] = "'partial_answer' can't be null";
        }
        if ($this->container['eval_passed'] === null) {
            $invalidProperties[] = "'eval_passed' can't be null";
        }
        if ($this->container['eval_reason'] === null) {
            $invalidProperties[] = "'eval_reason' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets think
     *
     * @return string
     */
    public function getThink()
    {
        return $this->container['think'];
    }

    /**
     * Sets think
     *
     * @param string $think think
     *
     * @return self
     */
    public function setThink($think)
    {
        if (is_null($think)) {
            throw new \InvalidArgumentException('non-nullable think cannot be null');
        }
        $this->container['think'] = $think;

        return $this;
    }

    /**
     * Gets current_question
     *
     * @return string
     */
    public function getCurrentQuestion()
    {
        return $this->container['current_question'];
    }

    /**
     * Sets current_question
     *
     * @param string $current_question current_question
     *
     * @return self
     */
    public function setCurrentQuestion($current_question)
    {
        if (is_null($current_question)) {
            throw new \InvalidArgumentException('non-nullable current_question cannot be null');
        }
        $this->container['current_question'] = $current_question;

        return $this;
    }

    /**
     * Gets other_resolved_question_ids
     *
     * @return string[]|null
     */
    public function getOtherResolvedQuestionIds()
    {
        return $this->container['other_resolved_question_ids'];
    }

    /**
     * Sets other_resolved_question_ids
     *
     * @param string[]|null $other_resolved_question_ids A list of questions ids that are no longer relevant to the current answer referenced by their IDs.
     *
     * @return self
     */
    public function setOtherResolvedQuestionIds($other_resolved_question_ids)
    {
        if (is_null($other_resolved_question_ids)) {
            throw new \InvalidArgumentException('non-nullable other_resolved_question_ids cannot be null');
        }
        $this->container['other_resolved_question_ids'] = $other_resolved_question_ids;

        return $this;
    }

    /**
     * Gets answer
     *
     * @return \Ragie\Api\Model\Answer
     */
    public function getAnswer()
    {
        return $this->container['answer'];
    }

    /**
     * Sets answer
     *
     * @param \Ragie\Api\Model\Answer $answer answer
     *
     * @return self
     */
    public function setAnswer($answer)
    {
        if (is_null($answer)) {
            throw new \InvalidArgumentException('non-nullable answer cannot be null');
        }
        $this->container['answer'] = $answer;

        return $this;
    }

    /**
     * Gets search
     *
     * @return \Ragie\Api\Model\Search
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param \Ragie\Api\Model\Search $search The search request to be made.
     *
     * @return self
     */
    public function setSearch($search)
    {
        if (is_null($search)) {
            throw new \InvalidArgumentException('non-nullable search cannot be null');
        }
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets query_details
     *
     * @return \Ragie\Api\Model\QueryDetails[]|null
     */
    public function getQueryDetails()
    {
        return $this->container['query_details'];
    }

    /**
     * Sets query_details
     *
     * @param \Ragie\Api\Model\QueryDetails[]|null $query_details query_details
     *
     * @return self
     */
    public function setQueryDetails($query_details)
    {
        if (is_null($query_details)) {
            throw new \InvalidArgumentException('non-nullable query_details cannot be null');
        }
        $this->container['query_details'] = $query_details;

        return $this;
    }

    /**
     * Gets search_log
     *
     * @return string|null
     */
    public function getSearchLog()
    {
        return $this->container['search_log'];
    }

    /**
     * Sets search_log
     *
     * @param string|null $search_log A log of the search results you found.
     *
     * @return self
     */
    public function setSearchLog($search_log)
    {
        if (is_null($search_log)) {
            throw new \InvalidArgumentException('non-nullable search_log cannot be null');
        }
        $this->container['search_log'] = $search_log;

        return $this;
    }

    /**
     * Gets questions_to_answer
     *
     * @return string[]|null
     */
    public function getQuestionsToAnswer()
    {
        return $this->container['questions_to_answer'];
    }

    /**
     * Sets questions_to_answer
     *
     * @param string[]|null $questions_to_answer The questions that need to be answered to answer the original question.
     *
     * @return self
     */
    public function setQuestionsToAnswer($questions_to_answer)
    {
        if (is_null($questions_to_answer)) {
            throw new \InvalidArgumentException('non-nullable questions_to_answer cannot be null');
        }
        $this->container['questions_to_answer'] = $questions_to_answer;

        return $this;
    }

    /**
     * Gets code_issue
     *
     * @return string
     */
    public function getCodeIssue()
    {
        return $this->container['code_issue'];
    }

    /**
     * Sets code_issue
     *
     * @param string $code_issue The natural language description of the code issue you need to solve.
     *
     * @return self
     */
    public function setCodeIssue($code_issue)
    {
        if (is_null($code_issue)) {
            throw new \InvalidArgumentException('non-nullable code_issue cannot be null');
        }
        $this->container['code_issue'] = $code_issue;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code The code you generated to solve the code issue.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets code_result
     *
     * @return string|null
     */
    public function getCodeResult()
    {
        return $this->container['code_result'];
    }

    /**
     * Sets code_result
     *
     * @param string|null $code_result The result of the code you generated after executing it.
     *
     * @return self
     */
    public function setCodeResult($code_result)
    {
        if (is_null($code_result)) {
            throw new \InvalidArgumentException('non-nullable code_result cannot be null');
        }
        $this->container['code_result'] = $code_result;

        return $this;
    }

    /**
     * Gets partial_answer
     *
     * @return \Ragie\Api\Model\Answer
     */
    public function getPartialAnswer()
    {
        return $this->container['partial_answer'];
    }

    /**
     * Sets partial_answer
     *
     * @param \Ragie\Api\Model\Answer $partial_answer The a potential partial answer when a full answer was not possible.
     *
     * @return self
     */
    public function setPartialAnswer($partial_answer)
    {
        if (is_null($partial_answer)) {
            throw new \InvalidArgumentException('non-nullable partial_answer cannot be null');
        }
        $this->container['partial_answer'] = $partial_answer;

        return $this;
    }

    /**
     * Gets eval_passed
     *
     * @return bool
     */
    public function getEvalPassed()
    {
        return $this->container['eval_passed'];
    }

    /**
     * Sets eval_passed
     *
     * @param bool $eval_passed eval_passed
     *
     * @return self
     */
    public function setEvalPassed($eval_passed)
    {
        if (is_null($eval_passed)) {
            throw new \InvalidArgumentException('non-nullable eval_passed cannot be null');
        }
        $this->container['eval_passed'] = $eval_passed;

        return $this;
    }

    /**
     * Gets eval_reason
     *
     * @return string
     */
    public function getEvalReason()
    {
        return $this->container['eval_reason'];
    }

    /**
     * Sets eval_reason
     *
     * @param string $eval_reason eval_reason
     *
     * @return self
     */
    public function setEvalReason($eval_reason)
    {
        if (is_null($eval_reason)) {
            throw new \InvalidArgumentException('non-nullable eval_reason cannot be null');
        }
        $this->container['eval_reason'] = $eval_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


