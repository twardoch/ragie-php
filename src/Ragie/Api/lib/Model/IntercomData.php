<?php
/**
 * IntercomData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IntercomData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntercomData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntercomData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'articles_help_center' => 'bool',
        'admins' => 'bool',
        'contacts' => 'bool',
        'conversations' => 'bool',
        'conversation_attachments' => 'bool',
        'conversation_notes' => 'bool',
        'tickets' => 'bool',
        'ticket_attachments' => 'bool',
        'ticket_comments' => 'bool',
        'ticket_notes' => 'bool',
        'filter_user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'articles_help_center' => null,
        'admins' => null,
        'contacts' => null,
        'conversations' => null,
        'conversation_attachments' => null,
        'conversation_notes' => null,
        'tickets' => null,
        'ticket_attachments' => null,
        'ticket_comments' => null,
        'ticket_notes' => null,
        'filter_user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'articles_help_center' => false,
        'admins' => false,
        'contacts' => false,
        'conversations' => false,
        'conversation_attachments' => false,
        'conversation_notes' => false,
        'tickets' => false,
        'ticket_attachments' => false,
        'ticket_comments' => false,
        'ticket_notes' => false,
        'filter_user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'articles_help_center' => 'articles_help_center',
        'admins' => 'admins',
        'contacts' => 'contacts',
        'conversations' => 'conversations',
        'conversation_attachments' => 'conversation_attachments',
        'conversation_notes' => 'conversation_notes',
        'tickets' => 'tickets',
        'ticket_attachments' => 'ticket_attachments',
        'ticket_comments' => 'ticket_comments',
        'ticket_notes' => 'ticket_notes',
        'filter_user_id' => 'filter_user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'articles_help_center' => 'setArticlesHelpCenter',
        'admins' => 'setAdmins',
        'contacts' => 'setContacts',
        'conversations' => 'setConversations',
        'conversation_attachments' => 'setConversationAttachments',
        'conversation_notes' => 'setConversationNotes',
        'tickets' => 'setTickets',
        'ticket_attachments' => 'setTicketAttachments',
        'ticket_comments' => 'setTicketComments',
        'ticket_notes' => 'setTicketNotes',
        'filter_user_id' => 'setFilterUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'articles_help_center' => 'getArticlesHelpCenter',
        'admins' => 'getAdmins',
        'contacts' => 'getContacts',
        'conversations' => 'getConversations',
        'conversation_attachments' => 'getConversationAttachments',
        'conversation_notes' => 'getConversationNotes',
        'tickets' => 'getTickets',
        'ticket_attachments' => 'getTicketAttachments',
        'ticket_comments' => 'getTicketComments',
        'ticket_notes' => 'getTicketNotes',
        'filter_user_id' => 'getFilterUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('articles_help_center', $data ?? [], false);
        $this->setIfExists('admins', $data ?? [], false);
        $this->setIfExists('contacts', $data ?? [], false);
        $this->setIfExists('conversations', $data ?? [], false);
        $this->setIfExists('conversation_attachments', $data ?? [], false);
        $this->setIfExists('conversation_notes', $data ?? [], false);
        $this->setIfExists('tickets', $data ?? [], false);
        $this->setIfExists('ticket_attachments', $data ?? [], false);
        $this->setIfExists('ticket_comments', $data ?? [], false);
        $this->setIfExists('ticket_notes', $data ?? [], false);
        $this->setIfExists('filter_user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets articles_help_center
     *
     * @return bool|null
     */
    public function getArticlesHelpCenter()
    {
        return $this->container['articles_help_center'];
    }

    /**
     * Sets articles_help_center
     *
     * @param bool|null $articles_help_center articles_help_center
     *
     * @return self
     */
    public function setArticlesHelpCenter($articles_help_center)
    {
        if (is_null($articles_help_center)) {
            throw new \InvalidArgumentException('non-nullable articles_help_center cannot be null');
        }
        $this->container['articles_help_center'] = $articles_help_center;

        return $this;
    }

    /**
     * Gets admins
     *
     * @return bool|null
     */
    public function getAdmins()
    {
        return $this->container['admins'];
    }

    /**
     * Sets admins
     *
     * @param bool|null $admins admins
     *
     * @return self
     */
    public function setAdmins($admins)
    {
        if (is_null($admins)) {
            throw new \InvalidArgumentException('non-nullable admins cannot be null');
        }
        $this->container['admins'] = $admins;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return bool|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param bool|null $contacts contacts
     *
     * @return self
     */
    public function setContacts($contacts)
    {
        if (is_null($contacts)) {
            throw new \InvalidArgumentException('non-nullable contacts cannot be null');
        }
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets conversations
     *
     * @return bool|null
     */
    public function getConversations()
    {
        return $this->container['conversations'];
    }

    /**
     * Sets conversations
     *
     * @param bool|null $conversations conversations
     *
     * @return self
     */
    public function setConversations($conversations)
    {
        if (is_null($conversations)) {
            throw new \InvalidArgumentException('non-nullable conversations cannot be null');
        }
        $this->container['conversations'] = $conversations;

        return $this;
    }

    /**
     * Gets conversation_attachments
     *
     * @return bool|null
     */
    public function getConversationAttachments()
    {
        return $this->container['conversation_attachments'];
    }

    /**
     * Sets conversation_attachments
     *
     * @param bool|null $conversation_attachments conversation_attachments
     *
     * @return self
     */
    public function setConversationAttachments($conversation_attachments)
    {
        if (is_null($conversation_attachments)) {
            throw new \InvalidArgumentException('non-nullable conversation_attachments cannot be null');
        }
        $this->container['conversation_attachments'] = $conversation_attachments;

        return $this;
    }

    /**
     * Gets conversation_notes
     *
     * @return bool|null
     */
    public function getConversationNotes()
    {
        return $this->container['conversation_notes'];
    }

    /**
     * Sets conversation_notes
     *
     * @param bool|null $conversation_notes conversation_notes
     *
     * @return self
     */
    public function setConversationNotes($conversation_notes)
    {
        if (is_null($conversation_notes)) {
            throw new \InvalidArgumentException('non-nullable conversation_notes cannot be null');
        }
        $this->container['conversation_notes'] = $conversation_notes;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return bool|null
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param bool|null $tickets tickets
     *
     * @return self
     */
    public function setTickets($tickets)
    {
        if (is_null($tickets)) {
            throw new \InvalidArgumentException('non-nullable tickets cannot be null');
        }
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets ticket_attachments
     *
     * @return bool|null
     */
    public function getTicketAttachments()
    {
        return $this->container['ticket_attachments'];
    }

    /**
     * Sets ticket_attachments
     *
     * @param bool|null $ticket_attachments ticket_attachments
     *
     * @return self
     */
    public function setTicketAttachments($ticket_attachments)
    {
        if (is_null($ticket_attachments)) {
            throw new \InvalidArgumentException('non-nullable ticket_attachments cannot be null');
        }
        $this->container['ticket_attachments'] = $ticket_attachments;

        return $this;
    }

    /**
     * Gets ticket_comments
     *
     * @return bool|null
     */
    public function getTicketComments()
    {
        return $this->container['ticket_comments'];
    }

    /**
     * Sets ticket_comments
     *
     * @param bool|null $ticket_comments ticket_comments
     *
     * @return self
     */
    public function setTicketComments($ticket_comments)
    {
        if (is_null($ticket_comments)) {
            throw new \InvalidArgumentException('non-nullable ticket_comments cannot be null');
        }
        $this->container['ticket_comments'] = $ticket_comments;

        return $this;
    }

    /**
     * Gets ticket_notes
     *
     * @return bool|null
     */
    public function getTicketNotes()
    {
        return $this->container['ticket_notes'];
    }

    /**
     * Sets ticket_notes
     *
     * @param bool|null $ticket_notes ticket_notes
     *
     * @return self
     */
    public function setTicketNotes($ticket_notes)
    {
        if (is_null($ticket_notes)) {
            throw new \InvalidArgumentException('non-nullable ticket_notes cannot be null');
        }
        $this->container['ticket_notes'] = $ticket_notes;

        return $this;
    }

    /**
     * Gets filter_user_id
     *
     * @return string|null
     */
    public function getFilterUserId()
    {
        return $this->container['filter_user_id'];
    }

    /**
     * Sets filter_user_id
     *
     * @param string|null $filter_user_id filter_user_id
     *
     * @return self
     */
    public function setFilterUserId($filter_user_id)
    {
        if (is_null($filter_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'filter_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filter_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filter_user_id'] = $filter_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


