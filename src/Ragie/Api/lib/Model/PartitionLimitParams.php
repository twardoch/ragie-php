<?php
/**
 * PartitionLimitParams
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PartitionLimitParams Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartitionLimitParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartitionLimitParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pages_hosted_limit_monthly' => 'int',
        'pages_processed_limit_monthly' => 'int',
        'pages_hosted_limit_max' => 'int',
        'pages_processed_limit_max' => 'int',
        'video_processed_limit_monthly' => 'int',
        'video_processed_limit_max' => 'int',
        'audio_processed_limit_monthly' => 'int',
        'audio_processed_limit_max' => 'int',
        'media_streamed_limit_monthly' => 'int',
        'media_streamed_limit_max' => 'int',
        'media_hosted_limit_monthly' => 'int',
        'media_hosted_limit_max' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pages_hosted_limit_monthly' => null,
        'pages_processed_limit_monthly' => null,
        'pages_hosted_limit_max' => null,
        'pages_processed_limit_max' => null,
        'video_processed_limit_monthly' => null,
        'video_processed_limit_max' => null,
        'audio_processed_limit_monthly' => null,
        'audio_processed_limit_max' => null,
        'media_streamed_limit_monthly' => null,
        'media_streamed_limit_max' => null,
        'media_hosted_limit_monthly' => null,
        'media_hosted_limit_max' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pages_hosted_limit_monthly' => true,
        'pages_processed_limit_monthly' => true,
        'pages_hosted_limit_max' => true,
        'pages_processed_limit_max' => true,
        'video_processed_limit_monthly' => true,
        'video_processed_limit_max' => true,
        'audio_processed_limit_monthly' => true,
        'audio_processed_limit_max' => true,
        'media_streamed_limit_monthly' => true,
        'media_streamed_limit_max' => true,
        'media_hosted_limit_monthly' => true,
        'media_hosted_limit_max' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pages_hosted_limit_monthly' => 'pages_hosted_limit_monthly',
        'pages_processed_limit_monthly' => 'pages_processed_limit_monthly',
        'pages_hosted_limit_max' => 'pages_hosted_limit_max',
        'pages_processed_limit_max' => 'pages_processed_limit_max',
        'video_processed_limit_monthly' => 'video_processed_limit_monthly',
        'video_processed_limit_max' => 'video_processed_limit_max',
        'audio_processed_limit_monthly' => 'audio_processed_limit_monthly',
        'audio_processed_limit_max' => 'audio_processed_limit_max',
        'media_streamed_limit_monthly' => 'media_streamed_limit_monthly',
        'media_streamed_limit_max' => 'media_streamed_limit_max',
        'media_hosted_limit_monthly' => 'media_hosted_limit_monthly',
        'media_hosted_limit_max' => 'media_hosted_limit_max'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pages_hosted_limit_monthly' => 'setPagesHostedLimitMonthly',
        'pages_processed_limit_monthly' => 'setPagesProcessedLimitMonthly',
        'pages_hosted_limit_max' => 'setPagesHostedLimitMax',
        'pages_processed_limit_max' => 'setPagesProcessedLimitMax',
        'video_processed_limit_monthly' => 'setVideoProcessedLimitMonthly',
        'video_processed_limit_max' => 'setVideoProcessedLimitMax',
        'audio_processed_limit_monthly' => 'setAudioProcessedLimitMonthly',
        'audio_processed_limit_max' => 'setAudioProcessedLimitMax',
        'media_streamed_limit_monthly' => 'setMediaStreamedLimitMonthly',
        'media_streamed_limit_max' => 'setMediaStreamedLimitMax',
        'media_hosted_limit_monthly' => 'setMediaHostedLimitMonthly',
        'media_hosted_limit_max' => 'setMediaHostedLimitMax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pages_hosted_limit_monthly' => 'getPagesHostedLimitMonthly',
        'pages_processed_limit_monthly' => 'getPagesProcessedLimitMonthly',
        'pages_hosted_limit_max' => 'getPagesHostedLimitMax',
        'pages_processed_limit_max' => 'getPagesProcessedLimitMax',
        'video_processed_limit_monthly' => 'getVideoProcessedLimitMonthly',
        'video_processed_limit_max' => 'getVideoProcessedLimitMax',
        'audio_processed_limit_monthly' => 'getAudioProcessedLimitMonthly',
        'audio_processed_limit_max' => 'getAudioProcessedLimitMax',
        'media_streamed_limit_monthly' => 'getMediaStreamedLimitMonthly',
        'media_streamed_limit_max' => 'getMediaStreamedLimitMax',
        'media_hosted_limit_monthly' => 'getMediaHostedLimitMonthly',
        'media_hosted_limit_max' => 'getMediaHostedLimitMax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pages_hosted_limit_monthly', $data ?? [], null);
        $this->setIfExists('pages_processed_limit_monthly', $data ?? [], null);
        $this->setIfExists('pages_hosted_limit_max', $data ?? [], null);
        $this->setIfExists('pages_processed_limit_max', $data ?? [], null);
        $this->setIfExists('video_processed_limit_monthly', $data ?? [], null);
        $this->setIfExists('video_processed_limit_max', $data ?? [], null);
        $this->setIfExists('audio_processed_limit_monthly', $data ?? [], null);
        $this->setIfExists('audio_processed_limit_max', $data ?? [], null);
        $this->setIfExists('media_streamed_limit_monthly', $data ?? [], null);
        $this->setIfExists('media_streamed_limit_max', $data ?? [], null);
        $this->setIfExists('media_hosted_limit_monthly', $data ?? [], null);
        $this->setIfExists('media_hosted_limit_max', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pages_hosted_limit_monthly']) && ($this->container['pages_hosted_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'pages_hosted_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pages_processed_limit_monthly']) && ($this->container['pages_processed_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'pages_processed_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pages_hosted_limit_max']) && ($this->container['pages_hosted_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'pages_hosted_limit_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pages_processed_limit_max']) && ($this->container['pages_processed_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'pages_processed_limit_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['video_processed_limit_monthly']) && ($this->container['video_processed_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'video_processed_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['video_processed_limit_max']) && ($this->container['video_processed_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'video_processed_limit_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['audio_processed_limit_monthly']) && ($this->container['audio_processed_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'audio_processed_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['audio_processed_limit_max']) && ($this->container['audio_processed_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'audio_processed_limit_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['media_streamed_limit_monthly']) && ($this->container['media_streamed_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'media_streamed_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['media_streamed_limit_max']) && ($this->container['media_streamed_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'media_streamed_limit_max', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['media_hosted_limit_monthly']) && ($this->container['media_hosted_limit_monthly'] < 1)) {
            $invalidProperties[] = "invalid value for 'media_hosted_limit_monthly', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['media_hosted_limit_max']) && ($this->container['media_hosted_limit_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'media_hosted_limit_max', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pages_hosted_limit_monthly
     *
     * @return int|null
     */
    public function getPagesHostedLimitMonthly()
    {
        return $this->container['pages_hosted_limit_monthly'];
    }

    /**
     * Sets pages_hosted_limit_monthly
     *
     * @param int|null $pages_hosted_limit_monthly pages_hosted_limit_monthly
     *
     * @return self
     */
    public function setPagesHostedLimitMonthly($pages_hosted_limit_monthly)
    {
        if (is_null($pages_hosted_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'pages_hosted_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_hosted_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pages_hosted_limit_monthly) && ($pages_hosted_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $pages_hosted_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['pages_hosted_limit_monthly'] = $pages_hosted_limit_monthly;

        return $this;
    }

    /**
     * Gets pages_processed_limit_monthly
     *
     * @return int|null
     */
    public function getPagesProcessedLimitMonthly()
    {
        return $this->container['pages_processed_limit_monthly'];
    }

    /**
     * Sets pages_processed_limit_monthly
     *
     * @param int|null $pages_processed_limit_monthly pages_processed_limit_monthly
     *
     * @return self
     */
    public function setPagesProcessedLimitMonthly($pages_processed_limit_monthly)
    {
        if (is_null($pages_processed_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'pages_processed_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_processed_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pages_processed_limit_monthly) && ($pages_processed_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $pages_processed_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['pages_processed_limit_monthly'] = $pages_processed_limit_monthly;

        return $this;
    }

    /**
     * Gets pages_hosted_limit_max
     *
     * @return int|null
     */
    public function getPagesHostedLimitMax()
    {
        return $this->container['pages_hosted_limit_max'];
    }

    /**
     * Sets pages_hosted_limit_max
     *
     * @param int|null $pages_hosted_limit_max pages_hosted_limit_max
     *
     * @return self
     */
    public function setPagesHostedLimitMax($pages_hosted_limit_max)
    {
        if (is_null($pages_hosted_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'pages_hosted_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_hosted_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pages_hosted_limit_max) && ($pages_hosted_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $pages_hosted_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['pages_hosted_limit_max'] = $pages_hosted_limit_max;

        return $this;
    }

    /**
     * Gets pages_processed_limit_max
     *
     * @return int|null
     */
    public function getPagesProcessedLimitMax()
    {
        return $this->container['pages_processed_limit_max'];
    }

    /**
     * Sets pages_processed_limit_max
     *
     * @param int|null $pages_processed_limit_max pages_processed_limit_max
     *
     * @return self
     */
    public function setPagesProcessedLimitMax($pages_processed_limit_max)
    {
        if (is_null($pages_processed_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'pages_processed_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pages_processed_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($pages_processed_limit_max) && ($pages_processed_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $pages_processed_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['pages_processed_limit_max'] = $pages_processed_limit_max;

        return $this;
    }

    /**
     * Gets video_processed_limit_monthly
     *
     * @return int|null
     */
    public function getVideoProcessedLimitMonthly()
    {
        return $this->container['video_processed_limit_monthly'];
    }

    /**
     * Sets video_processed_limit_monthly
     *
     * @param int|null $video_processed_limit_monthly video_processed_limit_monthly
     *
     * @return self
     */
    public function setVideoProcessedLimitMonthly($video_processed_limit_monthly)
    {
        if (is_null($video_processed_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'video_processed_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_processed_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($video_processed_limit_monthly) && ($video_processed_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $video_processed_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['video_processed_limit_monthly'] = $video_processed_limit_monthly;

        return $this;
    }

    /**
     * Gets video_processed_limit_max
     *
     * @return int|null
     */
    public function getVideoProcessedLimitMax()
    {
        return $this->container['video_processed_limit_max'];
    }

    /**
     * Sets video_processed_limit_max
     *
     * @param int|null $video_processed_limit_max video_processed_limit_max
     *
     * @return self
     */
    public function setVideoProcessedLimitMax($video_processed_limit_max)
    {
        if (is_null($video_processed_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'video_processed_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('video_processed_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($video_processed_limit_max) && ($video_processed_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $video_processed_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['video_processed_limit_max'] = $video_processed_limit_max;

        return $this;
    }

    /**
     * Gets audio_processed_limit_monthly
     *
     * @return int|null
     */
    public function getAudioProcessedLimitMonthly()
    {
        return $this->container['audio_processed_limit_monthly'];
    }

    /**
     * Sets audio_processed_limit_monthly
     *
     * @param int|null $audio_processed_limit_monthly audio_processed_limit_monthly
     *
     * @return self
     */
    public function setAudioProcessedLimitMonthly($audio_processed_limit_monthly)
    {
        if (is_null($audio_processed_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'audio_processed_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audio_processed_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($audio_processed_limit_monthly) && ($audio_processed_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $audio_processed_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['audio_processed_limit_monthly'] = $audio_processed_limit_monthly;

        return $this;
    }

    /**
     * Gets audio_processed_limit_max
     *
     * @return int|null
     */
    public function getAudioProcessedLimitMax()
    {
        return $this->container['audio_processed_limit_max'];
    }

    /**
     * Sets audio_processed_limit_max
     *
     * @param int|null $audio_processed_limit_max audio_processed_limit_max
     *
     * @return self
     */
    public function setAudioProcessedLimitMax($audio_processed_limit_max)
    {
        if (is_null($audio_processed_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'audio_processed_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('audio_processed_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($audio_processed_limit_max) && ($audio_processed_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $audio_processed_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['audio_processed_limit_max'] = $audio_processed_limit_max;

        return $this;
    }

    /**
     * Gets media_streamed_limit_monthly
     *
     * @return int|null
     */
    public function getMediaStreamedLimitMonthly()
    {
        return $this->container['media_streamed_limit_monthly'];
    }

    /**
     * Sets media_streamed_limit_monthly
     *
     * @param int|null $media_streamed_limit_monthly media_streamed_limit_monthly
     *
     * @return self
     */
    public function setMediaStreamedLimitMonthly($media_streamed_limit_monthly)
    {
        if (is_null($media_streamed_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'media_streamed_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_streamed_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($media_streamed_limit_monthly) && ($media_streamed_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $media_streamed_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['media_streamed_limit_monthly'] = $media_streamed_limit_monthly;

        return $this;
    }

    /**
     * Gets media_streamed_limit_max
     *
     * @return int|null
     */
    public function getMediaStreamedLimitMax()
    {
        return $this->container['media_streamed_limit_max'];
    }

    /**
     * Sets media_streamed_limit_max
     *
     * @param int|null $media_streamed_limit_max media_streamed_limit_max
     *
     * @return self
     */
    public function setMediaStreamedLimitMax($media_streamed_limit_max)
    {
        if (is_null($media_streamed_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'media_streamed_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_streamed_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($media_streamed_limit_max) && ($media_streamed_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $media_streamed_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['media_streamed_limit_max'] = $media_streamed_limit_max;

        return $this;
    }

    /**
     * Gets media_hosted_limit_monthly
     *
     * @return int|null
     */
    public function getMediaHostedLimitMonthly()
    {
        return $this->container['media_hosted_limit_monthly'];
    }

    /**
     * Sets media_hosted_limit_monthly
     *
     * @param int|null $media_hosted_limit_monthly media_hosted_limit_monthly
     *
     * @return self
     */
    public function setMediaHostedLimitMonthly($media_hosted_limit_monthly)
    {
        if (is_null($media_hosted_limit_monthly)) {
            array_push($this->openAPINullablesSetToNull, 'media_hosted_limit_monthly');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_hosted_limit_monthly', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($media_hosted_limit_monthly) && ($media_hosted_limit_monthly < 1)) {
            throw new \InvalidArgumentException('invalid value for $media_hosted_limit_monthly when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['media_hosted_limit_monthly'] = $media_hosted_limit_monthly;

        return $this;
    }

    /**
     * Gets media_hosted_limit_max
     *
     * @return int|null
     */
    public function getMediaHostedLimitMax()
    {
        return $this->container['media_hosted_limit_max'];
    }

    /**
     * Sets media_hosted_limit_max
     *
     * @param int|null $media_hosted_limit_max media_hosted_limit_max
     *
     * @return self
     */
    public function setMediaHostedLimitMax($media_hosted_limit_max)
    {
        if (is_null($media_hosted_limit_max)) {
            array_push($this->openAPINullablesSetToNull, 'media_hosted_limit_max');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('media_hosted_limit_max', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($media_hosted_limit_max) && ($media_hosted_limit_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $media_hosted_limit_max when calling PartitionLimitParams., must be bigger than or equal to 1.');
        }

        $this->container['media_hosted_limit_max'] = $media_hosted_limit_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


