<?php
/**
 * PartitionStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PartitionStats Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PartitionStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PartitionStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pages_processed_monthly' => 'float',
        'pages_hosted_monthly' => 'float',
        'pages_processed_total' => 'float',
        'pages_hosted_total' => 'float',
        'document_count' => 'int',
        'video_processed_monthly' => 'float',
        'video_processed_total' => 'float',
        'audio_processed_monthly' => 'float',
        'audio_processed_total' => 'float',
        'media_streamed_monthly' => 'float',
        'media_streamed_total' => 'float',
        'media_hosted_monthly' => 'float',
        'media_hosted_total' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pages_processed_monthly' => null,
        'pages_hosted_monthly' => null,
        'pages_processed_total' => null,
        'pages_hosted_total' => null,
        'document_count' => null,
        'video_processed_monthly' => null,
        'video_processed_total' => null,
        'audio_processed_monthly' => null,
        'audio_processed_total' => null,
        'media_streamed_monthly' => null,
        'media_streamed_total' => null,
        'media_hosted_monthly' => null,
        'media_hosted_total' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pages_processed_monthly' => false,
        'pages_hosted_monthly' => false,
        'pages_processed_total' => false,
        'pages_hosted_total' => false,
        'document_count' => false,
        'video_processed_monthly' => false,
        'video_processed_total' => false,
        'audio_processed_monthly' => false,
        'audio_processed_total' => false,
        'media_streamed_monthly' => false,
        'media_streamed_total' => false,
        'media_hosted_monthly' => false,
        'media_hosted_total' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pages_processed_monthly' => 'pages_processed_monthly',
        'pages_hosted_monthly' => 'pages_hosted_monthly',
        'pages_processed_total' => 'pages_processed_total',
        'pages_hosted_total' => 'pages_hosted_total',
        'document_count' => 'document_count',
        'video_processed_monthly' => 'video_processed_monthly',
        'video_processed_total' => 'video_processed_total',
        'audio_processed_monthly' => 'audio_processed_monthly',
        'audio_processed_total' => 'audio_processed_total',
        'media_streamed_monthly' => 'media_streamed_monthly',
        'media_streamed_total' => 'media_streamed_total',
        'media_hosted_monthly' => 'media_hosted_monthly',
        'media_hosted_total' => 'media_hosted_total'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pages_processed_monthly' => 'setPagesProcessedMonthly',
        'pages_hosted_monthly' => 'setPagesHostedMonthly',
        'pages_processed_total' => 'setPagesProcessedTotal',
        'pages_hosted_total' => 'setPagesHostedTotal',
        'document_count' => 'setDocumentCount',
        'video_processed_monthly' => 'setVideoProcessedMonthly',
        'video_processed_total' => 'setVideoProcessedTotal',
        'audio_processed_monthly' => 'setAudioProcessedMonthly',
        'audio_processed_total' => 'setAudioProcessedTotal',
        'media_streamed_monthly' => 'setMediaStreamedMonthly',
        'media_streamed_total' => 'setMediaStreamedTotal',
        'media_hosted_monthly' => 'setMediaHostedMonthly',
        'media_hosted_total' => 'setMediaHostedTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pages_processed_monthly' => 'getPagesProcessedMonthly',
        'pages_hosted_monthly' => 'getPagesHostedMonthly',
        'pages_processed_total' => 'getPagesProcessedTotal',
        'pages_hosted_total' => 'getPagesHostedTotal',
        'document_count' => 'getDocumentCount',
        'video_processed_monthly' => 'getVideoProcessedMonthly',
        'video_processed_total' => 'getVideoProcessedTotal',
        'audio_processed_monthly' => 'getAudioProcessedMonthly',
        'audio_processed_total' => 'getAudioProcessedTotal',
        'media_streamed_monthly' => 'getMediaStreamedMonthly',
        'media_streamed_total' => 'getMediaStreamedTotal',
        'media_hosted_monthly' => 'getMediaHostedMonthly',
        'media_hosted_total' => 'getMediaHostedTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pages_processed_monthly', $data ?? [], null);
        $this->setIfExists('pages_hosted_monthly', $data ?? [], null);
        $this->setIfExists('pages_processed_total', $data ?? [], null);
        $this->setIfExists('pages_hosted_total', $data ?? [], null);
        $this->setIfExists('document_count', $data ?? [], null);
        $this->setIfExists('video_processed_monthly', $data ?? [], null);
        $this->setIfExists('video_processed_total', $data ?? [], null);
        $this->setIfExists('audio_processed_monthly', $data ?? [], null);
        $this->setIfExists('audio_processed_total', $data ?? [], null);
        $this->setIfExists('media_streamed_monthly', $data ?? [], null);
        $this->setIfExists('media_streamed_total', $data ?? [], null);
        $this->setIfExists('media_hosted_monthly', $data ?? [], null);
        $this->setIfExists('media_hosted_total', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pages_processed_monthly'] === null) {
            $invalidProperties[] = "'pages_processed_monthly' can't be null";
        }
        if ($this->container['pages_hosted_monthly'] === null) {
            $invalidProperties[] = "'pages_hosted_monthly' can't be null";
        }
        if ($this->container['pages_processed_total'] === null) {
            $invalidProperties[] = "'pages_processed_total' can't be null";
        }
        if ($this->container['pages_hosted_total'] === null) {
            $invalidProperties[] = "'pages_hosted_total' can't be null";
        }
        if ($this->container['document_count'] === null) {
            $invalidProperties[] = "'document_count' can't be null";
        }
        if ($this->container['video_processed_monthly'] === null) {
            $invalidProperties[] = "'video_processed_monthly' can't be null";
        }
        if ($this->container['video_processed_total'] === null) {
            $invalidProperties[] = "'video_processed_total' can't be null";
        }
        if ($this->container['audio_processed_monthly'] === null) {
            $invalidProperties[] = "'audio_processed_monthly' can't be null";
        }
        if ($this->container['audio_processed_total'] === null) {
            $invalidProperties[] = "'audio_processed_total' can't be null";
        }
        if ($this->container['media_streamed_monthly'] === null) {
            $invalidProperties[] = "'media_streamed_monthly' can't be null";
        }
        if ($this->container['media_streamed_total'] === null) {
            $invalidProperties[] = "'media_streamed_total' can't be null";
        }
        if ($this->container['media_hosted_monthly'] === null) {
            $invalidProperties[] = "'media_hosted_monthly' can't be null";
        }
        if ($this->container['media_hosted_total'] === null) {
            $invalidProperties[] = "'media_hosted_total' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pages_processed_monthly
     *
     * @return float
     */
    public function getPagesProcessedMonthly()
    {
        return $this->container['pages_processed_monthly'];
    }

    /**
     * Sets pages_processed_monthly
     *
     * @param float $pages_processed_monthly Number of pages processed in the current month in this partition.
     *
     * @return self
     */
    public function setPagesProcessedMonthly($pages_processed_monthly)
    {
        if (is_null($pages_processed_monthly)) {
            throw new \InvalidArgumentException('non-nullable pages_processed_monthly cannot be null');
        }
        $this->container['pages_processed_monthly'] = $pages_processed_monthly;

        return $this;
    }

    /**
     * Gets pages_hosted_monthly
     *
     * @return float
     */
    public function getPagesHostedMonthly()
    {
        return $this->container['pages_hosted_monthly'];
    }

    /**
     * Sets pages_hosted_monthly
     *
     * @param float $pages_hosted_monthly Number of hosted pages added in the current month in this partition.
     *
     * @return self
     */
    public function setPagesHostedMonthly($pages_hosted_monthly)
    {
        if (is_null($pages_hosted_monthly)) {
            throw new \InvalidArgumentException('non-nullable pages_hosted_monthly cannot be null');
        }
        $this->container['pages_hosted_monthly'] = $pages_hosted_monthly;

        return $this;
    }

    /**
     * Gets pages_processed_total
     *
     * @return float
     */
    public function getPagesProcessedTotal()
    {
        return $this->container['pages_processed_total'];
    }

    /**
     * Sets pages_processed_total
     *
     * @param float $pages_processed_total Total number of pages processed in this partition.
     *
     * @return self
     */
    public function setPagesProcessedTotal($pages_processed_total)
    {
        if (is_null($pages_processed_total)) {
            throw new \InvalidArgumentException('non-nullable pages_processed_total cannot be null');
        }
        $this->container['pages_processed_total'] = $pages_processed_total;

        return $this;
    }

    /**
     * Gets pages_hosted_total
     *
     * @return float
     */
    public function getPagesHostedTotal()
    {
        return $this->container['pages_hosted_total'];
    }

    /**
     * Sets pages_hosted_total
     *
     * @param float $pages_hosted_total Total number of hosted pages in this partition.
     *
     * @return self
     */
    public function setPagesHostedTotal($pages_hosted_total)
    {
        if (is_null($pages_hosted_total)) {
            throw new \InvalidArgumentException('non-nullable pages_hosted_total cannot be null');
        }
        $this->container['pages_hosted_total'] = $pages_hosted_total;

        return $this;
    }

    /**
     * Gets document_count
     *
     * @return int
     */
    public function getDocumentCount()
    {
        return $this->container['document_count'];
    }

    /**
     * Sets document_count
     *
     * @param int $document_count Total number of documents, inclusive of all files types, in this partition.
     *
     * @return self
     */
    public function setDocumentCount($document_count)
    {
        if (is_null($document_count)) {
            throw new \InvalidArgumentException('non-nullable document_count cannot be null');
        }
        $this->container['document_count'] = $document_count;

        return $this;
    }

    /**
     * Gets video_processed_monthly
     *
     * @return float
     */
    public function getVideoProcessedMonthly()
    {
        return $this->container['video_processed_monthly'];
    }

    /**
     * Sets video_processed_monthly
     *
     * @param float $video_processed_monthly Total number of seconds of video processed in the current month in this partition.
     *
     * @return self
     */
    public function setVideoProcessedMonthly($video_processed_monthly)
    {
        if (is_null($video_processed_monthly)) {
            throw new \InvalidArgumentException('non-nullable video_processed_monthly cannot be null');
        }
        $this->container['video_processed_monthly'] = $video_processed_monthly;

        return $this;
    }

    /**
     * Gets video_processed_total
     *
     * @return float
     */
    public function getVideoProcessedTotal()
    {
        return $this->container['video_processed_total'];
    }

    /**
     * Sets video_processed_total
     *
     * @param float $video_processed_total Total number of seconds of video processed in this partition.
     *
     * @return self
     */
    public function setVideoProcessedTotal($video_processed_total)
    {
        if (is_null($video_processed_total)) {
            throw new \InvalidArgumentException('non-nullable video_processed_total cannot be null');
        }
        $this->container['video_processed_total'] = $video_processed_total;

        return $this;
    }

    /**
     * Gets audio_processed_monthly
     *
     * @return float
     */
    public function getAudioProcessedMonthly()
    {
        return $this->container['audio_processed_monthly'];
    }

    /**
     * Sets audio_processed_monthly
     *
     * @param float $audio_processed_monthly Total number of seconds of audio processed in the current month in this partition.
     *
     * @return self
     */
    public function setAudioProcessedMonthly($audio_processed_monthly)
    {
        if (is_null($audio_processed_monthly)) {
            throw new \InvalidArgumentException('non-nullable audio_processed_monthly cannot be null');
        }
        $this->container['audio_processed_monthly'] = $audio_processed_monthly;

        return $this;
    }

    /**
     * Gets audio_processed_total
     *
     * @return float
     */
    public function getAudioProcessedTotal()
    {
        return $this->container['audio_processed_total'];
    }

    /**
     * Sets audio_processed_total
     *
     * @param float $audio_processed_total Total number of seconds of audio processed in this partition.
     *
     * @return self
     */
    public function setAudioProcessedTotal($audio_processed_total)
    {
        if (is_null($audio_processed_total)) {
            throw new \InvalidArgumentException('non-nullable audio_processed_total cannot be null');
        }
        $this->container['audio_processed_total'] = $audio_processed_total;

        return $this;
    }

    /**
     * Gets media_streamed_monthly
     *
     * @return float
     */
    public function getMediaStreamedMonthly()
    {
        return $this->container['media_streamed_monthly'];
    }

    /**
     * Sets media_streamed_monthly
     *
     * @param float $media_streamed_monthly Total number of MBs streamed in the current month in this partition.
     *
     * @return self
     */
    public function setMediaStreamedMonthly($media_streamed_monthly)
    {
        if (is_null($media_streamed_monthly)) {
            throw new \InvalidArgumentException('non-nullable media_streamed_monthly cannot be null');
        }
        $this->container['media_streamed_monthly'] = $media_streamed_monthly;

        return $this;
    }

    /**
     * Gets media_streamed_total
     *
     * @return float
     */
    public function getMediaStreamedTotal()
    {
        return $this->container['media_streamed_total'];
    }

    /**
     * Sets media_streamed_total
     *
     * @param float $media_streamed_total Total number of MBs streamed in this partition.
     *
     * @return self
     */
    public function setMediaStreamedTotal($media_streamed_total)
    {
        if (is_null($media_streamed_total)) {
            throw new \InvalidArgumentException('non-nullable media_streamed_total cannot be null');
        }
        $this->container['media_streamed_total'] = $media_streamed_total;

        return $this;
    }

    /**
     * Gets media_hosted_monthly
     *
     * @return float
     */
    public function getMediaHostedMonthly()
    {
        return $this->container['media_hosted_monthly'];
    }

    /**
     * Sets media_hosted_monthly
     *
     * @param float $media_hosted_monthly Total number of MBs hosted in the current month in this partition.
     *
     * @return self
     */
    public function setMediaHostedMonthly($media_hosted_monthly)
    {
        if (is_null($media_hosted_monthly)) {
            throw new \InvalidArgumentException('non-nullable media_hosted_monthly cannot be null');
        }
        $this->container['media_hosted_monthly'] = $media_hosted_monthly;

        return $this;
    }

    /**
     * Gets media_hosted_total
     *
     * @return float
     */
    public function getMediaHostedTotal()
    {
        return $this->container['media_hosted_total'];
    }

    /**
     * Sets media_hosted_total
     *
     * @param float $media_hosted_total Total number of MBs hosted in this partition.
     *
     * @return self
     */
    public function setMediaHostedTotal($media_hosted_total)
    {
        if (is_null($media_hosted_total)) {
            throw new \InvalidArgumentException('non-nullable media_hosted_total cannot be null');
        }
        $this->container['media_hosted_total'] = $media_hosted_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


