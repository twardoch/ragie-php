<?php
/**
 * Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Model;

use \ArrayAccess;
use \Ragie\Api\ObjectSerializer;

/**
 * Response Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'created_at' => 'int',
        'status' => 'string',
        'error' => 'string',
        'incomplete_details' => 'mixed',
        'instructions' => 'string',
        'max_output_tokens' => 'mixed',
        'model' => 'string',
        'output' => '\Ragie\Api\Model\ResponseOutputInner[]',
        'output_parsed' => '\Ragie\Api\Model\FinalAnswer',
        'tools' => '\Ragie\Api\Model\Tool[]',
        'reasoning' => '\Ragie\Api\Model\Reasoning',
        'parallel_tool_calls' => 'bool',
        'store' => 'bool',
        'temperature' => 'float',
        'previous_response_id' => 'string',
        'tool_choice' => 'string',
        'top_p' => 'float',
        'truncation' => 'string',
        'usage' => '\Ragie\Api\Model\RagieApiSchemaResponseUsage',
        'user' => 'mixed',
        'metadata' => 'array<string,mixed>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'created_at' => null,
        'status' => null,
        'error' => null,
        'incomplete_details' => null,
        'instructions' => null,
        'max_output_tokens' => null,
        'model' => null,
        'output' => null,
        'output_parsed' => null,
        'tools' => null,
        'reasoning' => null,
        'parallel_tool_calls' => null,
        'store' => null,
        'temperature' => null,
        'previous_response_id' => null,
        'tool_choice' => null,
        'top_p' => null,
        'truncation' => null,
        'usage' => null,
        'user' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'object' => false,
        'created_at' => false,
        'status' => false,
        'error' => true,
        'incomplete_details' => true,
        'instructions' => true,
        'max_output_tokens' => true,
        'model' => false,
        'output' => false,
        'output_parsed' => true,
        'tools' => false,
        'reasoning' => false,
        'parallel_tool_calls' => false,
        'store' => false,
        'temperature' => false,
        'previous_response_id' => true,
        'tool_choice' => false,
        'top_p' => false,
        'truncation' => false,
        'usage' => false,
        'user' => true,
        'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'created_at' => 'created_at',
        'status' => 'status',
        'error' => 'error',
        'incomplete_details' => 'incomplete_details',
        'instructions' => 'instructions',
        'max_output_tokens' => 'max_output_tokens',
        'model' => 'model',
        'output' => 'output',
        'output_parsed' => 'output_parsed',
        'tools' => 'tools',
        'reasoning' => 'reasoning',
        'parallel_tool_calls' => 'parallel_tool_calls',
        'store' => 'store',
        'temperature' => 'temperature',
        'previous_response_id' => 'previous_response_id',
        'tool_choice' => 'tool_choice',
        'top_p' => 'top_p',
        'truncation' => 'truncation',
        'usage' => 'usage',
        'user' => 'user',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'created_at' => 'setCreatedAt',
        'status' => 'setStatus',
        'error' => 'setError',
        'incomplete_details' => 'setIncompleteDetails',
        'instructions' => 'setInstructions',
        'max_output_tokens' => 'setMaxOutputTokens',
        'model' => 'setModel',
        'output' => 'setOutput',
        'output_parsed' => 'setOutputParsed',
        'tools' => 'setTools',
        'reasoning' => 'setReasoning',
        'parallel_tool_calls' => 'setParallelToolCalls',
        'store' => 'setStore',
        'temperature' => 'setTemperature',
        'previous_response_id' => 'setPreviousResponseId',
        'tool_choice' => 'setToolChoice',
        'top_p' => 'setTopP',
        'truncation' => 'setTruncation',
        'usage' => 'setUsage',
        'user' => 'setUser',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'created_at' => 'getCreatedAt',
        'status' => 'getStatus',
        'error' => 'getError',
        'incomplete_details' => 'getIncompleteDetails',
        'instructions' => 'getInstructions',
        'max_output_tokens' => 'getMaxOutputTokens',
        'model' => 'getModel',
        'output' => 'getOutput',
        'output_parsed' => 'getOutputParsed',
        'tools' => 'getTools',
        'reasoning' => 'getReasoning',
        'parallel_tool_calls' => 'getParallelToolCalls',
        'store' => 'getStore',
        'temperature' => 'getTemperature',
        'previous_response_id' => 'getPreviousResponseId',
        'tool_choice' => 'getToolChoice',
        'top_p' => 'getTopP',
        'truncation' => 'getTruncation',
        'usage' => 'getUsage',
        'user' => 'getUser',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const OBJECT_RESPONSE = 'response';
    public const STATUS_COMPLETED = 'completed';
    public const STATUS_FAILED = 'failed';
    public const STATUS_IN_PROGRESS = 'in_progress';
    public const MODEL_DEEP_SEARCH = 'deep-search';
    public const TOOL_CHOICE_AUTO = 'auto';
    public const TRUNCATION_DISABLED = 'disabled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_RESPONSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_COMPLETED,
            self::STATUS_FAILED,
            self::STATUS_IN_PROGRESS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelAllowableValues()
    {
        return [
            self::MODEL_DEEP_SEARCH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getToolChoiceAllowableValues()
    {
        return [
            self::TOOL_CHOICE_AUTO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTruncationAllowableValues()
    {
        return [
            self::TRUNCATION_DISABLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'response');
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('incomplete_details', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('max_output_tokens', $data ?? [], null);
        $this->setIfExists('model', $data ?? [], 'deep-search');
        $this->setIfExists('output', $data ?? [], null);
        $this->setIfExists('output_parsed', $data ?? [], null);
        $this->setIfExists('tools', $data ?? [], null);
        $this->setIfExists('reasoning', $data ?? [], null);
        $this->setIfExists('parallel_tool_calls', $data ?? [], false);
        $this->setIfExists('store', $data ?? [], false);
        $this->setIfExists('temperature', $data ?? [], 1.0);
        $this->setIfExists('previous_response_id', $data ?? [], null);
        $this->setIfExists('tool_choice', $data ?? [], 'auto');
        $this->setIfExists('top_p', $data ?? [], 1.0);
        $this->setIfExists('truncation', $data ?? [], 'disabled');
        $this->setIfExists('usage', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getModelAllowableValues();
        if (!is_null($this->container['model']) && !in_array($this->container['model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'model', must be one of '%s'",
                $this->container['model'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['output'] === null) {
            $invalidProperties[] = "'output' can't be null";
        }
        if ($this->container['tools'] === null) {
            $invalidProperties[] = "'tools' can't be null";
        }
        if ($this->container['reasoning'] === null) {
            $invalidProperties[] = "'reasoning' can't be null";
        }
        $allowedValues = $this->getToolChoiceAllowableValues();
        if (!is_null($this->container['tool_choice']) && !in_array($this->container['tool_choice'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tool_choice', must be one of '%s'",
                $this->container['tool_choice'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTruncationAllowableValues();
        if (!is_null($this->container['truncation']) && !in_array($this->container['truncation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'truncation', must be one of '%s'",
                $this->container['truncation'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['usage'] === null) {
            $invalidProperties[] = "'usage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            array_push($this->openAPINullablesSetToNull, 'error');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('error', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets incomplete_details
     *
     * @return mixed|null
     */
    public function getIncompleteDetails()
    {
        return $this->container['incomplete_details'];
    }

    /**
     * Sets incomplete_details
     *
     * @param mixed|null $incomplete_details incomplete_details
     *
     * @return self
     */
    public function setIncompleteDetails($incomplete_details)
    {
        if (is_null($incomplete_details)) {
            array_push($this->openAPINullablesSetToNull, 'incomplete_details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incomplete_details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['incomplete_details'] = $incomplete_details;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return string|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param string|null $instructions instructions
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            array_push($this->openAPINullablesSetToNull, 'instructions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instructions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets max_output_tokens
     *
     * @return mixed|null
     */
    public function getMaxOutputTokens()
    {
        return $this->container['max_output_tokens'];
    }

    /**
     * Sets max_output_tokens
     *
     * @param mixed|null $max_output_tokens max_output_tokens
     *
     * @return self
     */
    public function setMaxOutputTokens($max_output_tokens)
    {
        if (is_null($max_output_tokens)) {
            array_push($this->openAPINullablesSetToNull, 'max_output_tokens');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('max_output_tokens', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['max_output_tokens'] = $max_output_tokens;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $allowedValues = $this->getModelAllowableValues();
        if (!in_array($model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'model', must be one of '%s'",
                    $model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets output
     *
     * @return \Ragie\Api\Model\ResponseOutputInner[]
     */
    public function getOutput()
    {
        return $this->container['output'];
    }

    /**
     * Sets output
     *
     * @param \Ragie\Api\Model\ResponseOutputInner[] $output output
     *
     * @return self
     */
    public function setOutput($output)
    {
        if (is_null($output)) {
            throw new \InvalidArgumentException('non-nullable output cannot be null');
        }
        $this->container['output'] = $output;

        return $this;
    }

    /**
     * Gets output_parsed
     *
     * @return \Ragie\Api\Model\FinalAnswer|null
     */
    public function getOutputParsed()
    {
        return $this->container['output_parsed'];
    }

    /**
     * Sets output_parsed
     *
     * @param \Ragie\Api\Model\FinalAnswer|null $output_parsed output_parsed
     *
     * @return self
     */
    public function setOutputParsed($output_parsed)
    {
        if (is_null($output_parsed)) {
            array_push($this->openAPINullablesSetToNull, 'output_parsed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('output_parsed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['output_parsed'] = $output_parsed;

        return $this;
    }

    /**
     * Gets tools
     *
     * @return \Ragie\Api\Model\Tool[]
     */
    public function getTools()
    {
        return $this->container['tools'];
    }

    /**
     * Sets tools
     *
     * @param \Ragie\Api\Model\Tool[] $tools tools
     *
     * @return self
     */
    public function setTools($tools)
    {
        if (is_null($tools)) {
            throw new \InvalidArgumentException('non-nullable tools cannot be null');
        }
        $this->container['tools'] = $tools;

        return $this;
    }

    /**
     * Gets reasoning
     *
     * @return \Ragie\Api\Model\Reasoning
     */
    public function getReasoning()
    {
        return $this->container['reasoning'];
    }

    /**
     * Sets reasoning
     *
     * @param \Ragie\Api\Model\Reasoning $reasoning reasoning
     *
     * @return self
     */
    public function setReasoning($reasoning)
    {
        if (is_null($reasoning)) {
            throw new \InvalidArgumentException('non-nullable reasoning cannot be null');
        }
        $this->container['reasoning'] = $reasoning;

        return $this;
    }

    /**
     * Gets parallel_tool_calls
     *
     * @return bool|null
     */
    public function getParallelToolCalls()
    {
        return $this->container['parallel_tool_calls'];
    }

    /**
     * Sets parallel_tool_calls
     *
     * @param bool|null $parallel_tool_calls parallel_tool_calls
     *
     * @return self
     */
    public function setParallelToolCalls($parallel_tool_calls)
    {
        if (is_null($parallel_tool_calls)) {
            throw new \InvalidArgumentException('non-nullable parallel_tool_calls cannot be null');
        }
        $this->container['parallel_tool_calls'] = $parallel_tool_calls;

        return $this;
    }

    /**
     * Gets store
     *
     * @return bool|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param bool|null $store store
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature temperature
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        if (is_null($temperature)) {
            throw new \InvalidArgumentException('non-nullable temperature cannot be null');
        }
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets previous_response_id
     *
     * @return string|null
     */
    public function getPreviousResponseId()
    {
        return $this->container['previous_response_id'];
    }

    /**
     * Sets previous_response_id
     *
     * @param string|null $previous_response_id previous_response_id
     *
     * @return self
     */
    public function setPreviousResponseId($previous_response_id)
    {
        if (is_null($previous_response_id)) {
            array_push($this->openAPINullablesSetToNull, 'previous_response_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('previous_response_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['previous_response_id'] = $previous_response_id;

        return $this;
    }

    /**
     * Gets tool_choice
     *
     * @return string|null
     */
    public function getToolChoice()
    {
        return $this->container['tool_choice'];
    }

    /**
     * Sets tool_choice
     *
     * @param string|null $tool_choice tool_choice
     *
     * @return self
     */
    public function setToolChoice($tool_choice)
    {
        if (is_null($tool_choice)) {
            throw new \InvalidArgumentException('non-nullable tool_choice cannot be null');
        }
        $allowedValues = $this->getToolChoiceAllowableValues();
        if (!in_array($tool_choice, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tool_choice', must be one of '%s'",
                    $tool_choice,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tool_choice'] = $tool_choice;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p top_p
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        if (is_null($top_p)) {
            throw new \InvalidArgumentException('non-nullable top_p cannot be null');
        }
        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets truncation
     *
     * @return string|null
     */
    public function getTruncation()
    {
        return $this->container['truncation'];
    }

    /**
     * Sets truncation
     *
     * @param string|null $truncation truncation
     *
     * @return self
     */
    public function setTruncation($truncation)
    {
        if (is_null($truncation)) {
            throw new \InvalidArgumentException('non-nullable truncation cannot be null');
        }
        $allowedValues = $this->getTruncationAllowableValues();
        if (!in_array($truncation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'truncation', must be one of '%s'",
                    $truncation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['truncation'] = $truncation;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \Ragie\Api\Model\RagieApiSchemaResponseUsage
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \Ragie\Api\Model\RagieApiSchemaResponseUsage $usage usage
     *
     * @return self
     */
    public function setUsage($usage)
    {
        if (is_null($usage)) {
            throw new \InvalidArgumentException('non-nullable usage cannot be null');
        }
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets user
     *
     * @return mixed|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param mixed|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            array_push($this->openAPINullablesSetToNull, 'user');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,mixed>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,mixed>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


