<?php
/**
 * RetrieveParams
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ragie API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Ragie\Api\Model;

use \ArrayAccess;
use \Ragie\Api\ObjectSerializer;

/**
 * RetrieveParams Class Doc Comment
 *
 * @category Class
 * @package  Ragie\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetrieveParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetrieveParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'query' => 'string',
        'top_k' => 'int',
        'filter' => 'array<string,mixed>',
        'rerank' => 'bool',
        'max_chunks_per_document' => 'int',
        'partition' => 'string',
        'recency_bias' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'query' => null,
        'top_k' => null,
        'filter' => null,
        'rerank' => null,
        'max_chunks_per_document' => null,
        'partition' => null,
        'recency_bias' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'query' => false,
        'top_k' => false,
        'filter' => false,
        'rerank' => false,
        'max_chunks_per_document' => false,
        'partition' => false,
        'recency_bias' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'query' => 'query',
        'top_k' => 'top_k',
        'filter' => 'filter',
        'rerank' => 'rerank',
        'max_chunks_per_document' => 'max_chunks_per_document',
        'partition' => 'partition',
        'recency_bias' => 'recency_bias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'query' => 'setQuery',
        'top_k' => 'setTopK',
        'filter' => 'setFilter',
        'rerank' => 'setRerank',
        'max_chunks_per_document' => 'setMaxChunksPerDocument',
        'partition' => 'setPartition',
        'recency_bias' => 'setRecencyBias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'query' => 'getQuery',
        'top_k' => 'getTopK',
        'filter' => 'getFilter',
        'rerank' => 'getRerank',
        'max_chunks_per_document' => 'getMaxChunksPerDocument',
        'partition' => 'getPartition',
        'recency_bias' => 'getRecencyBias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('top_k', $data ?? [], 8);
        $this->setIfExists('filter', $data ?? [], null);
        $this->setIfExists('rerank', $data ?? [], false);
        $this->setIfExists('max_chunks_per_document', $data ?? [], null);
        $this->setIfExists('partition', $data ?? [], null);
        $this->setIfExists('recency_bias', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query The query to search with when retrieving document chunks.
     *
     * @return self
     */
    public function setQuery($query)
    {
        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets top_k
     *
     * @return int|null
     */
    public function getTopK()
    {
        return $this->container['top_k'];
    }

    /**
     * Sets top_k
     *
     * @param int|null $top_k The maximum number of chunks to return. Defaults to 8.
     *
     * @return self
     */
    public function setTopK($top_k)
    {
        if (is_null($top_k)) {
            throw new \InvalidArgumentException('non-nullable top_k cannot be null');
        }
        $this->container['top_k'] = $top_k;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return array<string,mixed>|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param array<string,mixed>|null $filter filter
     *
     * @return self
     */
    public function setFilter($filter)
    {
        if (is_null($filter)) {
            throw new \InvalidArgumentException('non-nullable filter cannot be null');
        }
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets rerank
     *
     * @return bool|null
     */
    public function getRerank()
    {
        return $this->container['rerank'];
    }

    /**
     * Sets rerank
     *
     * @param bool|null $rerank Reranks the chunks for semantic relevancy post cosine similarity. Will be slower but returns a subset of highly relevant chunks. Best for reducing hallucinations and improving accuracy for LLM generation.
     *
     * @return self
     */
    public function setRerank($rerank)
    {
        if (is_null($rerank)) {
            throw new \InvalidArgumentException('non-nullable rerank cannot be null');
        }
        $this->container['rerank'] = $rerank;

        return $this;
    }

    /**
     * Gets max_chunks_per_document
     *
     * @return int|null
     */
    public function getMaxChunksPerDocument()
    {
        return $this->container['max_chunks_per_document'];
    }

    /**
     * Sets max_chunks_per_document
     *
     * @param int|null $max_chunks_per_document Maximum number of chunks to retrieve per document. Use this to increase the number of documents the final chunks are retrieved from. This feature is in beta and may change in the future.
     *
     * @return self
     */
    public function setMaxChunksPerDocument($max_chunks_per_document)
    {
        if (is_null($max_chunks_per_document)) {
            throw new \InvalidArgumentException('non-nullable max_chunks_per_document cannot be null');
        }
        $this->container['max_chunks_per_document'] = $max_chunks_per_document;

        return $this;
    }

    /**
     * Gets partition
     *
     * @return string|null
     */
    public function getPartition()
    {
        return $this->container['partition'];
    }

    /**
     * Sets partition
     *
     * @param string|null $partition The partition to scope a retrieval to. If omitted, the retrieval will be scoped to the default partition, which includes any documents that have not been created in a partition.
     *
     * @return self
     */
    public function setPartition($partition)
    {
        if (is_null($partition)) {
            throw new \InvalidArgumentException('non-nullable partition cannot be null');
        }
        $this->container['partition'] = $partition;

        return $this;
    }

    /**
     * Gets recency_bias
     *
     * @return bool|null
     */
    public function getRecencyBias()
    {
        return $this->container['recency_bias'];
    }

    /**
     * Sets recency_bias
     *
     * @param bool|null $recency_bias Enables recency bias which will favor more recent documents vs older documents. https://docs.ragie.ai/docs/retrievals-recency-bias
     *
     * @return self
     */
    public function setRecencyBias($recency_bias)
    {
        if (is_null($recency_bias)) {
            throw new \InvalidArgumentException('non-nullable recency_bias cannot be null');
        }
        $this->container['recency_bias'] = $recency_bias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


